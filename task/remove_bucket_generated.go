// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask
var _ = uuid.New()

// removeBucketTaskRequirement is the requirement for execute RemoveBucketTask.
type removeBucketTaskRequirement interface {
	navvy.Task

	// Inherited value
}

// mockRemoveBucketTask is the mock task for RemoveBucketTask.
type mockRemoveBucketTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
}

func (t *mockRemoveBucketTask) Run() {
	panic("mockRemoveBucketTask should not be run.")
}

// RemoveBucketTask will remove a bucket.
type RemoveBucketTask struct {
	removeBucketTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Todo

	// Runtime value
	types.BucketName
	types.DestinationService
	types.Force
	types.Pool
}

// Run implement navvy.Task
func (t *RemoveBucketTask) Run() {
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t)
}

func (t *RemoveBucketTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task RemoveBucket failed: {%w}", err))
}

// Wait will wait until RemoveBucketTask has been finished
func (t *RemoveBucketTask) Wait() {
	t.GetPool().Wait()
}
