// Code generated by go generate; DO NOT EDIT.
package task

import (
	"github.com/Xuanwo/navvy"

	"github.com/yunify/qsctl/v2/task/types"
	"github.com/yunify/qsctl/v2/task/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask

// CopyFileTask will copy a file to storage.
type CopyFileTask struct {
	// Inherited value
	types.Pool
	types.Storage
	types.Path
	types.ObjectKey

	// Runtime value
	types.Todo
	types.Size
}

// Run implement navvy.Task
func (t *CopyFileTask) Run() {
	utils.SubmitNextTask(t)
}

// initCopyFileTask will create a CopyFileTask and fetch inherited data from CopyTask.
func initCopyFileTask(task types.Todoist) (t *CopyFileTask, o *CopyTask) {
	o, ok := task.(*CopyTask)
	if !ok {
		panic("parent task is not a CopyTask")
	}

	t = &CopyFileTask{}
	t.SetPool(o.GetPool())
	t.SetStorage(o.GetStorage())
	t.SetPath(o.GetPath())
	t.SetObjectKey(o.GetObjectKey())
	return
}

// CopyLargeFileTask will copy a large file to storage.
type CopyLargeFileTask struct {
	// Inherited value
	types.Pool
	types.Size
	types.Path
	types.ObjectKey
	types.Storage

	// Runtime value
	types.Todo
	types.UploadID
	types.CurrentPartNumber
	types.CurrentOffset
	types.WaitGroup
	types.PartSize
	types.TaskConstructor
}

// Run implement navvy.Task
func (t *CopyLargeFileTask) Run() {
	utils.SubmitNextTask(t)
}

// initCopyLargeFileTask will create a CopyLargeFileTask and fetch inherited data from CopyFileTask.
func initCopyLargeFileTask(task types.Todoist) (t *CopyLargeFileTask, o *CopyFileTask) {
	o, ok := task.(*CopyFileTask)
	if !ok {
		panic("parent task is not a CopyFileTask")
	}

	t = &CopyLargeFileTask{}
	t.SetPool(o.GetPool())
	t.SetSize(o.GetSize())
	t.SetPath(o.GetPath())
	t.SetObjectKey(o.GetObjectKey())
	t.SetStorage(o.GetStorage())
	return
}

// CopyPartialFileTask will copy a partial file to storage, is the sub task for CopyLargeFile.
type CopyPartialFileTask struct {
	// Inherited value
	types.Pool
	types.Path
	types.ObjectKey
	types.Storage
	types.UploadID
	types.WaitGroup

	// Runtime value
	types.Todo
	types.MD5Sum
	types.Size
	types.Offset
	types.PartNumber
}

// Run implement navvy.Task
func (t *CopyPartialFileTask) Run() {
	utils.SubmitNextTask(t)
}

// initCopyPartialFileTask will create a CopyPartialFileTask and fetch inherited data from CopyLargeFileTask.
func initCopyPartialFileTask(task types.Todoist) (t *CopyPartialFileTask, o *CopyLargeFileTask) {
	o, ok := task.(*CopyLargeFileTask)
	if !ok {
		panic("parent task is not a CopyLargeFileTask")
	}

	t = &CopyPartialFileTask{}
	t.SetPool(o.GetPool())
	t.SetPath(o.GetPath())
	t.SetObjectKey(o.GetObjectKey())
	t.SetStorage(o.GetStorage())
	t.SetUploadID(o.GetUploadID())
	t.SetWaitGroup(o.GetWaitGroup())
	return
}

// CopySmallFileTask will copy a small file to storage.
type CopySmallFileTask struct {
	// Inherited value
	types.Pool
	types.Path
	types.ObjectKey
	types.Storage
	types.Size

	// Runtime value
	types.Todo
	types.MD5Sum
	types.Offset
}

// Run implement navvy.Task
func (t *CopySmallFileTask) Run() {
	utils.SubmitNextTask(t)
}

// initCopySmallFileTask will create a CopySmallFileTask and fetch inherited data from CopyFileTask.
func initCopySmallFileTask(task types.Todoist) (t *CopySmallFileTask, o *CopyFileTask) {
	o, ok := task.(*CopyFileTask)
	if !ok {
		panic("parent task is not a CopyFileTask")
	}

	t = &CopySmallFileTask{}
	t.SetPool(o.GetPool())
	t.SetPath(o.GetPath())
	t.SetObjectKey(o.GetObjectKey())
	t.SetStorage(o.GetStorage())
	t.SetSize(o.GetSize())
	return
}
