// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will abort all multipart uploads in a bucket.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationServiceGetter
	types.ZoneGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationService
	types.Zone

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will send put request to create a bucket.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationServiceGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationService

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will send delete request to delete a bucket.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationServiceGetter
	types.ZoneGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationService
	types.Zone

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will send get request to get bucket list.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.DestinationTypeGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.SourceTypeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.SourcePath
	types.SourceStorage
	types.SourceType

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will the root copy task.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a file to DestinationStorage.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.TotalSize
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a large file to DestinationStorage.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a partial file to DestinationStorage, is the sub task for CopyLargeFile.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BytesPoolGetter
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BytesPool
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a partial stream to DestinationStorage.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Content
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a small file to DestinationStorage.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will copy a stream to DestinationStorage.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BytesPool
	types.CurrentOffset
	types.PartSize
	types.SegmentID
	types.TotalSize
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.OffsetGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
	types.MD5SumSetter
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Offset
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
	types.MD5Sum
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will get file's md5 sum.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will upload file as an object.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will the root list task.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
	types.BucketName
	types.DestinationPath
	types.DestinationService
	types.DestinationStorage
	types.DestinationType
	types.HumanReadable
	types.ListType
	types.LongFormat
	types.ObjectChannel
	types.Pool
	types.Recursive
	types.Zone
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will make new bucket with given key.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketName
	types.DestinationService
	types.Pool
	types.Zone
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SegmentIDGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SegmentID

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will upload a multipart via stream.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will upload a multipart via file.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.TotalSize

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will init a multipart upload.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.SegmentID
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will upload a multipart via stream.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will delete a remote object with specific key.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DoneGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Done

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will delete a dir with rm -r.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationStorageGetter
	types.DoneGetter
	types.ObjectChannelGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationStorage
	types.Done
	types.ObjectChannel

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will delete remote objects with object channel.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.DestinationPath
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ObjectChannelGetter
	types.RecursiveGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.ObjectChannel
	types.Recursive

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will list objects.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ObjectChannelGetter
	types.RecursiveGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.ObjectChannel
	types.Recursive

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will list objects.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ExpireGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationPath
	types.DestinationStorage
	types.Expire

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will presign a remote object and return the signed url.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.URL
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will stat a remote object by request headObject.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Object
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will handle presign tasks.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketName
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.Expire
	types.Pool
	types.URL
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will remove a bucket.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketName
	types.DestinationPath
	types.DestinationService
	types.DestinationStorage
	types.DestinationType
	types.Force
	types.Pool
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationPathGetter
	types.DestinationServiceGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationPath
	types.DestinationService
	types.DestinationStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will remove a bucket force.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Done
	types.ObjectChannel
	types.Recursive
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will delete a dir recursively.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Done
	types.ObjectChannel
	types.Recursive
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will remove object.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.Pool
	types.Recursive
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will will stat a remote object.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.Object
	types.Pool
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// TaskRequirement is the requirement for execute Task.
type TaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter

	// Mutable value
}

// mockTask is the mock task for Task.
type mockTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content

	// Mutable value
}

func (t *mockTask) Run() {
	panic("mockTask should not be run.")
}

// Task will get stream's md5 sum.
type Task struct {
	TaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
}

// Run implement navvy.Task
func (t *Task) Run() {
	t.run()
}

func (t *Task) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task  failed: {%w}", err))
}

// NewTask will create a Task and fetch inherited data from parent task.
func NewTask(task navvy.Task) navvy.Task {
	t := &Task{
		TaskRequirement: task.(TaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}
