// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// abortMultipartTaskRequirement is the requirement for execute AbortMultipartTask.
type abortMultipartTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockAbortMultipartTask is the mock task for AbortMultipartTask.
type mockAbortMultipartTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationStorage

	// Mutable value
}

func (t *mockAbortMultipartTask) Run() {
	panic("mockAbortMultipartTask should not be run.")
}

// AbortMultipartTask will abort all multipart uploads in a bucket.
type AbortMultipartTask struct {
	abortMultipartTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *AbortMultipartTask) Run() {
	t.run()
}

func (t *AbortMultipartTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task AbortMultipart failed: {%w}", err))
}

// NewAbortMultipartTask will create a AbortMultipartTask and fetch inherited data from parent task.
func NewAbortMultipartTask(task navvy.Task) navvy.Task {
	t := &AbortMultipartTask{
		abortMultipartTaskRequirement: task.(abortMultipartTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// bucketCreateTaskRequirement is the requirement for execute BucketCreateTask.
type bucketCreateTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationServiceGetter
	types.ZoneGetter

	// Mutable value
}

// mockBucketCreateTask is the mock task for BucketCreateTask.
type mockBucketCreateTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationService
	types.Zone

	// Mutable value
}

func (t *mockBucketCreateTask) Run() {
	panic("mockBucketCreateTask should not be run.")
}

// BucketCreateTask will send put request to create a bucket.
type BucketCreateTask struct {
	bucketCreateTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *BucketCreateTask) Run() {
	t.run()
}

func (t *BucketCreateTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task BucketCreate failed: {%w}", err))
}

// NewBucketCreateTask will create a BucketCreateTask and fetch inherited data from parent task.
func NewBucketCreateTask(task navvy.Task) navvy.Task {
	t := &BucketCreateTask{
		bucketCreateTaskRequirement: task.(bucketCreateTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// bucketListTaskRequirement is the requirement for execute BucketListTask.
type bucketListTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationServiceGetter
	types.ZoneGetter

	// Mutable value
}

// mockBucketListTask is the mock task for BucketListTask.
type mockBucketListTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationService
	types.Zone

	// Mutable value
}

func (t *mockBucketListTask) Run() {
	panic("mockBucketListTask should not be run.")
}

// BucketListTask will send get request to get bucket list.
type BucketListTask struct {
	bucketListTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
}

// Run implement navvy.Task
func (t *BucketListTask) Run() {
	t.run()
}

func (t *BucketListTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task BucketList failed: {%w}", err))
}

// NewBucketListTask will create a BucketListTask and fetch inherited data from parent task.
func NewBucketListTask(task navvy.Task) navvy.Task {
	t := &BucketListTask{
		bucketListTaskRequirement: task.(bucketListTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyTaskRequirement is the requirement for execute CopyTask.
type copyTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.DestinationTypeGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.SourceTypeGetter

	// Mutable value
}

// mockCopyTask is the mock task for CopyTask.
type mockCopyTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.SourcePath
	types.SourceStorage
	types.SourceType

	// Mutable value
}

func (t *mockCopyTask) Run() {
	panic("mockCopyTask should not be run.")
}

// CopyTask will copy task will execute copy between two storager.
type CopyTask struct {
	copyTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *CopyTask) Run() {
	t.run()
}

func (t *CopyTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task Copy failed: {%w}", err))
}

// NewCopyTask will create a CopyTask and fetch inherited data from parent task.
func NewCopyTask(task navvy.Task) navvy.Task {
	t := &CopyTask{
		copyTaskRequirement: task.(copyTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyFileTaskRequirement is the requirement for execute CopyFileTask.
type copyFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyFileTask is the mock task for CopyFileTask.
type mockCopyFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyFileTask) Run() {
	panic("mockCopyFileTask should not be run.")
}

// CopyFileTask will copy a file between two storager.
type CopyFileTask struct {
	copyFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyFileTask) Run() {
	t.run()
}

func (t *CopyFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyFile failed: {%w}", err))
}

// NewCopyFileTask will create a CopyFileTask and fetch inherited data from parent task.
func NewCopyFileTask(task navvy.Task) navvy.Task {
	t := &CopyFileTask{
		copyFileTaskRequirement: task.(copyFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyLargeFileTaskRequirement is the requirement for execute CopyLargeFileTask.
type copyLargeFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopyLargeFileTask is the mock task for CopyLargeFileTask.
type mockCopyLargeFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopyLargeFileTask) Run() {
	panic("mockCopyLargeFileTask should not be run.")
}

// CopyLargeFileTask will copy a large file between two storager.
type CopyLargeFileTask struct {
	copyLargeFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
}

// Run implement navvy.Task
func (t *CopyLargeFileTask) Run() {
	t.run()
}

func (t *CopyLargeFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyLargeFile failed: {%w}", err))
}

// NewCopyLargeFileTask will create a CopyLargeFileTask and fetch inherited data from parent task.
func NewCopyLargeFileTask(task navvy.Task) navvy.Task {
	t := &CopyLargeFileTask{
		copyLargeFileTaskRequirement: task.(copyLargeFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyPartialFileTaskRequirement is the requirement for execute CopyPartialFileTask.
type copyPartialFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopyPartialFileTask is the mock task for CopyPartialFileTask.
type mockCopyPartialFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopyPartialFileTask) Run() {
	panic("mockCopyPartialFileTask should not be run.")
}

// CopyPartialFileTask will copy a partial file to between two storager.
type CopyPartialFileTask struct {
	copyPartialFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopyPartialFileTask) Run() {
	t.run()
}

func (t *CopyPartialFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyPartialFile failed: {%w}", err))
}

// NewCopyPartialFileTask will create a CopyPartialFileTask and fetch inherited data from parent task.
func NewCopyPartialFileTask(task navvy.Task) navvy.Task {
	t := &CopyPartialFileTask{
		copyPartialFileTaskRequirement: task.(copyPartialFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyPartialStreamTaskRequirement is the requirement for execute CopyPartialStreamTask.
type copyPartialStreamTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BytesPoolGetter
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyPartialStreamTask is the mock task for CopyPartialStreamTask.
type mockCopyPartialStreamTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BytesPool
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyPartialStreamTask) Run() {
	panic("mockCopyPartialStreamTask should not be run.")
}

// CopyPartialStreamTask will copy a partial stream between two storager.
type CopyPartialStreamTask struct {
	copyPartialStreamTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Content
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopyPartialStreamTask) Run() {
	t.run()
}

func (t *CopyPartialStreamTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyPartialStream failed: {%w}", err))
}

// NewCopyPartialStreamTask will create a CopyPartialStreamTask and fetch inherited data from parent task.
func NewCopyPartialStreamTask(task navvy.Task) navvy.Task {
	t := &CopyPartialStreamTask{
		copyPartialStreamTaskRequirement: task.(copyPartialStreamTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copySmallFileTaskRequirement is the requirement for execute CopySmallFileTask.
type copySmallFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopySmallFileTask is the mock task for CopySmallFileTask.
type mockCopySmallFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopySmallFileTask) Run() {
	panic("mockCopySmallFileTask should not be run.")
}

// CopySmallFileTask will copy a small file between two storager.
type CopySmallFileTask struct {
	copySmallFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopySmallFileTask) Run() {
	t.run()
}

func (t *CopySmallFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopySmallFile failed: {%w}", err))
}

// NewCopySmallFileTask will create a CopySmallFileTask and fetch inherited data from parent task.
func NewCopySmallFileTask(task navvy.Task) navvy.Task {
	t := &CopySmallFileTask{
		copySmallFileTaskRequirement: task.(copySmallFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// copyStreamTaskRequirement is the requirement for execute CopyStreamTask.
type copyStreamTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyStreamTask is the mock task for CopyStreamTask.
type mockCopyStreamTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyStreamTask) Run() {
	panic("mockCopyStreamTask should not be run.")
}

// CopyStreamTask will copy a stream between two storager.
type CopyStreamTask struct {
	copyStreamTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BytesPool
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyStreamTask) Run() {
	t.run()
}

func (t *CopyStreamTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyStream failed: {%w}", err))
}

// NewCopyStreamTask will create a CopyStreamTask and fetch inherited data from parent task.
func NewCopyStreamTask(task navvy.Task) navvy.Task {
	t := &CopyStreamTask{
		copyStreamTaskRequirement: task.(copyStreamTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// deleteDirTaskRequirement is the requirement for execute DeleteDirTask.
type deleteDirTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockDeleteDirTask is the mock task for DeleteDirTask.
type mockDeleteDirTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockDeleteDirTask) Run() {
	panic("mockDeleteDirTask should not be run.")
}

// DeleteDirTask will will delete a dir recursively.
type DeleteDirTask struct {
	deleteDirTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.Recursive
	types.ScheduleFunc
}

// Run implement navvy.Task
func (t *DeleteDirTask) Run() {
	t.run()
}

func (t *DeleteDirTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteDir failed: {%w}", err))
}

// NewDeleteDirTask will create a DeleteDirTask and fetch inherited data from parent task.
func NewDeleteDirTask(task navvy.Task) navvy.Task {
	t := &DeleteDirTask{
		deleteDirTaskRequirement: task.(deleteDirTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// deleteFileTaskRequirement is the requirement for execute DeleteFileTask.
type deleteFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockDeleteFileTask is the mock task for DeleteFileTask.
type mockDeleteFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockDeleteFileTask) Run() {
	panic("mockDeleteFileTask should not be run.")
}

// DeleteFileTask will will delete a file from storage.
type DeleteFileTask struct {
	deleteFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *DeleteFileTask) Run() {
	t.run()
}

func (t *DeleteFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteFile failed: {%w}", err))
}

// NewDeleteFileTask will create a DeleteFileTask and fetch inherited data from parent task.
func NewDeleteFileTask(task navvy.Task) navvy.Task {
	t := &DeleteFileTask{
		deleteFileTaskRequirement: task.(deleteFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// deleteStorageTaskRequirement is the requirement for execute DeleteStorageTask.
type deleteStorageTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.StorageNameGetter

	// Mutable value
}

// mockDeleteStorageTask is the mock task for DeleteStorageTask.
type mockDeleteStorageTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.StorageName

	// Mutable value
}

func (t *mockDeleteStorageTask) Run() {
	panic("mockDeleteStorageTask should not be run.")
}

// DeleteStorageTask will delete a storage.
type DeleteStorageTask struct {
	deleteStorageTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *DeleteStorageTask) Run() {
	t.run()
}

func (t *DeleteStorageTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteStorage failed: {%w}", err))
}

// NewDeleteStorageTask will create a DeleteStorageTask and fetch inherited data from parent task.
func NewDeleteStorageTask(task navvy.Task) navvy.Task {
	t := &DeleteStorageTask{
		deleteStorageTaskRequirement: task.(deleteStorageTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// deleteStorageForceTaskRequirement is the requirement for execute DeleteStorageForceTask.
type deleteStorageForceTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.StorageNameGetter

	// Mutable value
}

// mockDeleteStorageForceTask is the mock task for DeleteStorageForceTask.
type mockDeleteStorageForceTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.StorageName

	// Mutable value
}

func (t *mockDeleteStorageForceTask) Run() {
	panic("mockDeleteStorageForceTask should not be run.")
}

// DeleteStorageForceTask will remove a bucket force.
type DeleteStorageForceTask struct {
	deleteStorageForceTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
}

// Run implement navvy.Task
func (t *DeleteStorageForceTask) Run() {
	t.run()
}

func (t *DeleteStorageForceTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteStorageForce failed: {%w}", err))
}

// NewDeleteStorageForceTask will create a DeleteStorageForceTask and fetch inherited data from parent task.
func NewDeleteStorageForceTask(task navvy.Task) navvy.Task {
	t := &DeleteStorageForceTask{
		deleteStorageForceTaskRequirement: task.(deleteStorageForceTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// fileMD5SumTaskRequirement is the requirement for execute FileMD5SumTask.
type fileMD5SumTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.OffsetGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
	types.MD5SumSetter
}

// mockFileMD5SumTask is the mock task for FileMD5SumTask.
type mockFileMD5SumTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Offset
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
	types.MD5Sum
}

func (t *mockFileMD5SumTask) Run() {
	panic("mockFileMD5SumTask should not be run.")
}

// FileMD5SumTask will get file's md5 sum.
type FileMD5SumTask struct {
	fileMD5SumTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *FileMD5SumTask) Run() {
	t.run()
}

func (t *FileMD5SumTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task FileMD5Sum failed: {%w}", err))
}

// NewFileMD5SumTask will create a FileMD5SumTask and fetch inherited data from parent task.
func NewFileMD5SumTask(task navvy.Task) navvy.Task {
	t := &FileMD5SumTask{
		fileMD5SumTaskRequirement: task.(fileMD5SumTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// fileUploadTaskRequirement is the requirement for execute FileUploadTask.
type fileUploadTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockFileUploadTask is the mock task for FileUploadTask.
type mockFileUploadTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockFileUploadTask) Run() {
	panic("mockFileUploadTask should not be run.")
}

// FileUploadTask will upload file as an object.
type FileUploadTask struct {
	fileUploadTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *FileUploadTask) Run() {
	t.run()
}

func (t *FileUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task FileUpload failed: {%w}", err))
}

// NewFileUploadTask will create a FileUploadTask and fetch inherited data from parent task.
func NewFileUploadTask(task navvy.Task) navvy.Task {
	t := &FileUploadTask{
		fileUploadTaskRequirement: task.(fileUploadTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// listTaskRequirement is the requirement for execute ListTask.
type listTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockListTask is the mock task for ListTask.
type mockListTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockListTask) Run() {
	panic("mockListTask should not be run.")
}

// ListTask will the root list task.
type ListTask struct {
	listTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
	types.BucketName
	types.DestinationPath
	types.DestinationService
	types.DestinationStorage
	types.DestinationType
	types.HumanReadable
	types.ListType
	types.LongFormat
	types.ObjectChannel
	types.Pool
	types.Recursive
	types.Zone
}

// Run implement navvy.Task
func (t *ListTask) Run() {
	t.run()
}

func (t *ListTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task List failed: {%w}", err))
}

// NewListTask will create a ListTask and fetch inherited data from parent task.
func NewListTask(task navvy.Task) navvy.Task {
	t := &ListTask{
		listTaskRequirement: task.(listTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// makeBucketTaskRequirement is the requirement for execute MakeBucketTask.
type makeBucketTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockMakeBucketTask is the mock task for MakeBucketTask.
type mockMakeBucketTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockMakeBucketTask) Run() {
	panic("mockMakeBucketTask should not be run.")
}

// MakeBucketTask will make new bucket with given key.
type MakeBucketTask struct {
	makeBucketTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketName
	types.DestinationService
	types.Pool
	types.Zone
}

// Run implement navvy.Task
func (t *MakeBucketTask) Run() {
	t.run()
}

func (t *MakeBucketTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MakeBucket failed: {%w}", err))
}

// NewMakeBucketTask will create a MakeBucketTask and fetch inherited data from parent task.
func NewMakeBucketTask(task navvy.Task) navvy.Task {
	t := &MakeBucketTask{
		makeBucketTaskRequirement: task.(makeBucketTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// multipartCompleteTaskRequirement is the requirement for execute MultipartCompleteTask.
type multipartCompleteTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SegmentIDGetter

	// Mutable value
}

// mockMultipartCompleteTask is the mock task for MultipartCompleteTask.
type mockMultipartCompleteTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SegmentID

	// Mutable value
}

func (t *mockMultipartCompleteTask) Run() {
	panic("mockMultipartCompleteTask should not be run.")
}

// MultipartCompleteTask will upload a multipart via stream.
type MultipartCompleteTask struct {
	multipartCompleteTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartCompleteTask) Run() {
	t.run()
}

func (t *MultipartCompleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartComplete failed: {%w}", err))
}

// NewMultipartCompleteTask will create a MultipartCompleteTask and fetch inherited data from parent task.
func NewMultipartCompleteTask(task navvy.Task) navvy.Task {
	t := &MultipartCompleteTask{
		multipartCompleteTaskRequirement: task.(multipartCompleteTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// multipartFileUploadTaskRequirement is the requirement for execute MultipartFileUploadTask.
type multipartFileUploadTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockMultipartFileUploadTask is the mock task for MultipartFileUploadTask.
type mockMultipartFileUploadTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockMultipartFileUploadTask) Run() {
	panic("mockMultipartFileUploadTask should not be run.")
}

// MultipartFileUploadTask will upload a multipart via file.
type MultipartFileUploadTask struct {
	multipartFileUploadTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartFileUploadTask) Run() {
	t.run()
}

func (t *MultipartFileUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartFileUpload failed: {%w}", err))
}

// NewMultipartFileUploadTask will create a MultipartFileUploadTask and fetch inherited data from parent task.
func NewMultipartFileUploadTask(task navvy.Task) navvy.Task {
	t := &MultipartFileUploadTask{
		multipartFileUploadTaskRequirement: task.(multipartFileUploadTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// multipartInitTaskRequirement is the requirement for execute MultipartInitTask.
type multipartInitTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockMultipartInitTask is the mock task for MultipartInitTask.
type mockMultipartInitTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.TotalSize

	// Mutable value
}

func (t *mockMultipartInitTask) Run() {
	panic("mockMultipartInitTask should not be run.")
}

// MultipartInitTask will init a multipart upload.
type MultipartInitTask struct {
	multipartInitTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.SegmentID
}

// Run implement navvy.Task
func (t *MultipartInitTask) Run() {
	t.run()
}

func (t *MultipartInitTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartInit failed: {%w}", err))
}

// NewMultipartInitTask will create a MultipartInitTask and fetch inherited data from parent task.
func NewMultipartInitTask(task navvy.Task) navvy.Task {
	t := &MultipartInitTask{
		multipartInitTaskRequirement: task.(multipartInitTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// multipartStreamUploadTaskRequirement is the requirement for execute MultipartStreamUploadTask.
type multipartStreamUploadTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter

	// Mutable value
}

// mockMultipartStreamUploadTask is the mock task for MultipartStreamUploadTask.
type mockMultipartStreamUploadTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size

	// Mutable value
}

func (t *mockMultipartStreamUploadTask) Run() {
	panic("mockMultipartStreamUploadTask should not be run.")
}

// MultipartStreamUploadTask will upload a multipart via stream.
type MultipartStreamUploadTask struct {
	multipartStreamUploadTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartStreamUploadTask) Run() {
	t.run()
}

func (t *MultipartStreamUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartStreamUpload failed: {%w}", err))
}

// NewMultipartStreamUploadTask will create a MultipartStreamUploadTask and fetch inherited data from parent task.
func NewMultipartStreamUploadTask(task navvy.Task) navvy.Task {
	t := &MultipartStreamUploadTask{
		multipartStreamUploadTaskRequirement: task.(multipartStreamUploadTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectListTaskRequirement is the requirement for execute ObjectListTask.
type objectListTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ObjectChannelGetter
	types.RecursiveGetter

	// Mutable value
}

// mockObjectListTask is the mock task for ObjectListTask.
type mockObjectListTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.ObjectChannel
	types.Recursive

	// Mutable value
}

func (t *mockObjectListTask) Run() {
	panic("mockObjectListTask should not be run.")
}

// ObjectListTask will list objects.
type ObjectListTask struct {
	objectListTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *ObjectListTask) Run() {
	t.run()
}

func (t *ObjectListTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectList failed: {%w}", err))
}

// NewObjectListTask will create a ObjectListTask and fetch inherited data from parent task.
func NewObjectListTask(task navvy.Task) navvy.Task {
	t := &ObjectListTask{
		objectListTaskRequirement: task.(objectListTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectListAsyncTaskRequirement is the requirement for execute ObjectListAsyncTask.
type objectListAsyncTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ObjectChannelGetter
	types.RecursiveGetter

	// Mutable value
}

// mockObjectListAsyncTask is the mock task for ObjectListAsyncTask.
type mockObjectListAsyncTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.ObjectChannel
	types.Recursive

	// Mutable value
}

func (t *mockObjectListAsyncTask) Run() {
	panic("mockObjectListAsyncTask should not be run.")
}

// ObjectListAsyncTask will list objects.
type ObjectListAsyncTask struct {
	objectListAsyncTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *ObjectListAsyncTask) Run() {
	t.run()
}

func (t *ObjectListAsyncTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectListAsync failed: {%w}", err))
}

// NewObjectListAsyncTask will create a ObjectListAsyncTask and fetch inherited data from parent task.
func NewObjectListAsyncTask(task navvy.Task) navvy.Task {
	t := &ObjectListAsyncTask{
		objectListAsyncTaskRequirement: task.(objectListAsyncTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectPresignTaskRequirement is the requirement for execute ObjectPresignTask.
type objectPresignTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BucketNameGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ExpireGetter

	// Mutable value
}

// mockObjectPresignTask is the mock task for ObjectPresignTask.
type mockObjectPresignTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationPath
	types.DestinationStorage
	types.Expire

	// Mutable value
}

func (t *mockObjectPresignTask) Run() {
	panic("mockObjectPresignTask should not be run.")
}

// ObjectPresignTask will will presign a remote object and return the signed url.
type ObjectPresignTask struct {
	objectPresignTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.URL
}

// Run implement navvy.Task
func (t *ObjectPresignTask) Run() {
	t.run()
}

func (t *ObjectPresignTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectPresign failed: {%w}", err))
}

// NewObjectPresignTask will create a ObjectPresignTask and fetch inherited data from parent task.
func NewObjectPresignTask(task navvy.Task) navvy.Task {
	t := &ObjectPresignTask{
		objectPresignTaskRequirement: task.(objectPresignTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectStatTaskRequirement is the requirement for execute ObjectStatTask.
type objectStatTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockObjectStatTask is the mock task for ObjectStatTask.
type mockObjectStatTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockObjectStatTask) Run() {
	panic("mockObjectStatTask should not be run.")
}

// ObjectStatTask will stat a remote object by request headObject.
type ObjectStatTask struct {
	objectStatTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Object
}

// Run implement navvy.Task
func (t *ObjectStatTask) Run() {
	t.run()
}

func (t *ObjectStatTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectStat failed: {%w}", err))
}

// NewObjectStatTask will create a ObjectStatTask and fetch inherited data from parent task.
func NewObjectStatTask(task navvy.Task) navvy.Task {
	t := &ObjectStatTask{
		objectStatTaskRequirement: task.(objectStatTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// presignTaskRequirement is the requirement for execute PresignTask.
type presignTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockPresignTask is the mock task for PresignTask.
type mockPresignTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockPresignTask) Run() {
	panic("mockPresignTask should not be run.")
}

// PresignTask will will handle presign tasks.
type PresignTask struct {
	presignTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketName
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.Expire
	types.Pool
	types.URL
}

// Run implement navvy.Task
func (t *PresignTask) Run() {
	t.run()
}

func (t *PresignTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task Presign failed: {%w}", err))
}

// NewPresignTask will create a PresignTask and fetch inherited data from parent task.
func NewPresignTask(task navvy.Task) navvy.Task {
	t := &PresignTask{
		presignTaskRequirement: task.(presignTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// statTaskRequirement is the requirement for execute StatTask.
type statTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value

	// Mutable value
}

// mockStatTask is the mock task for StatTask.
type mockStatTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value

	// Mutable value
}

func (t *mockStatTask) Run() {
	panic("mockStatTask should not be run.")
}

// StatTask will will stat a remote object.
type StatTask struct {
	statTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.DestinationPath
	types.DestinationStorage
	types.DestinationType
	types.Object
	types.Pool
}

// Run implement navvy.Task
func (t *StatTask) Run() {
	t.run()
}

func (t *StatTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task Stat failed: {%w}", err))
}

// NewStatTask will create a StatTask and fetch inherited data from parent task.
func NewStatTask(task navvy.Task) navvy.Task {
	t := &StatTask{
		statTaskRequirement: task.(statTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// streamMD5SumTaskRequirement is the requirement for execute StreamMD5SumTask.
type streamMD5SumTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter

	// Mutable value
}

// mockStreamMD5SumTask is the mock task for StreamMD5SumTask.
type mockStreamMD5SumTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content

	// Mutable value
}

func (t *mockStreamMD5SumTask) Run() {
	panic("mockStreamMD5SumTask should not be run.")
}

// StreamMD5SumTask will get stream's md5 sum.
type StreamMD5SumTask struct {
	streamMD5SumTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
}

// Run implement navvy.Task
func (t *StreamMD5SumTask) Run() {
	t.run()
}

func (t *StreamMD5SumTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task StreamMD5Sum failed: {%w}", err))
}

// NewStreamMD5SumTask will create a StreamMD5SumTask and fetch inherited data from parent task.
func NewStreamMD5SumTask(task navvy.Task) navvy.Task {
	t := &StreamMD5SumTask{
		streamMD5SumTaskRequirement: task.(streamMD5SumTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}
