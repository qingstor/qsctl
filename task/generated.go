// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/schedule"
	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// CopyFileTask will copy a file between two storager.
type CopyFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Output value
	types.TotalSize
}

// validateInput will validate all input before run task.
func (t *CopyFileTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopyFile value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopyFile value DestinationStorage is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopyFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopyFile value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopyFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *CopyFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyFile failed: {%w}", err))
}

// NewCopyFile will create a CopyFileTask struct and fetch inherited data from parent task.
func NewCopyFile(task navvy.Task) *CopyFileTask {
	t := &CopyFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyFileTask will create a CopyFileTask which meets navvy.Task.
func NewCopyFileTask(task navvy.Task) navvy.Task {
	return NewCopyFile(task)
}

// CopyLargeFileTask will copy a large file between two storager.
type CopyLargeFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Output value
	types.Offset
	types.PartSize
	types.SegmentID
}

// validateInput will validate all input before run task.
func (t *CopyLargeFileTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopyLargeFile value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopyLargeFile value DestinationStorage is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopyLargeFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopyLargeFile value SourceStorage is invalid"))
	}
	if !t.ValidateTotalSize() {
		panic(fmt.Errorf("Task CopyLargeFile value TotalSize is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopyLargeFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
	types.LoadTotalSize(task, t)
}

// Run implement navvy.Task
func (t *CopyLargeFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyLargeFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyLargeFile failed: {%w}", err))
}

// NewCopyLargeFile will create a CopyLargeFileTask struct and fetch inherited data from parent task.
func NewCopyLargeFile(task navvy.Task) *CopyLargeFileTask {
	t := &CopyLargeFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyLargeFileTask will create a CopyLargeFileTask which meets navvy.Task.
func NewCopyLargeFileTask(task navvy.Task) navvy.Task {
	return NewCopyLargeFile(task)
}

// CopyPartialFileTask will copy a partial file to between two storager.
type CopyPartialFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.Offset
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Output value
	types.Done
	types.Size
}

// validateInput will validate all input before run task.
func (t *CopyPartialFileTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopyPartialFile value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopyPartialFile value DestinationStorage is invalid"))
	}
	if !t.ValidateOffset() {
		panic(fmt.Errorf("Task CopyPartialFile value Offset is invalid"))
	}
	if !t.ValidatePartSize() {
		panic(fmt.Errorf("Task CopyPartialFile value PartSize is invalid"))
	}
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task CopyPartialFile value SegmentID is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopyPartialFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopyPartialFile value SourceStorage is invalid"))
	}
	if !t.ValidateTotalSize() {
		panic(fmt.Errorf("Task CopyPartialFile value TotalSize is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopyPartialFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadOffset(task, t)
	types.LoadPartSize(task, t)
	types.LoadSegmentID(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
	types.LoadTotalSize(task, t)
}

// Run implement navvy.Task
func (t *CopyPartialFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyPartialFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyPartialFile failed: {%w}", err))
}

// NewCopyPartialFile will create a CopyPartialFileTask struct and fetch inherited data from parent task.
func NewCopyPartialFile(task navvy.Task) *CopyPartialFileTask {
	t := &CopyPartialFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyPartialFileTask will create a CopyPartialFileTask which meets navvy.Task.
func NewCopyPartialFileTask(task navvy.Task) navvy.Task {
	return NewCopyPartialFile(task)
}

// CopyPartialStreamTask will copy a partial stream between two storager.
type CopyPartialStreamTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.BytesPool
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage

	// Output value
	types.Content
	types.Done
	types.Size
}

// validateInput will validate all input before run task.
func (t *CopyPartialStreamTask) validateInput() {
	if !t.ValidateBytesPool() {
		panic(fmt.Errorf("Task CopyPartialStream value BytesPool is invalid"))
	}
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopyPartialStream value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopyPartialStream value DestinationStorage is invalid"))
	}
	if !t.ValidatePartSize() {
		panic(fmt.Errorf("Task CopyPartialStream value PartSize is invalid"))
	}
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task CopyPartialStream value SegmentID is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopyPartialStream value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopyPartialStream value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopyPartialStreamTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadBytesPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadPartSize(task, t)
	types.LoadSegmentID(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *CopyPartialStreamTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyPartialStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyPartialStream failed: {%w}", err))
}

// NewCopyPartialStream will create a CopyPartialStreamTask struct and fetch inherited data from parent task.
func NewCopyPartialStream(task navvy.Task) *CopyPartialStreamTask {
	t := &CopyPartialStreamTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyPartialStreamTask will create a CopyPartialStreamTask which meets navvy.Task.
func NewCopyPartialStreamTask(task navvy.Task) navvy.Task {
	return NewCopyPartialStream(task)
}

// CopySingleFileTask will execute a file copy operation between towo storager.
type CopySingleFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Size
	types.SourcePath
	types.SourceStorage

	// Output value
}

// validateInput will validate all input before run task.
func (t *CopySingleFileTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopySingleFile value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopySingleFile value DestinationStorage is invalid"))
	}
	if !t.ValidateMD5Sum() {
		panic(fmt.Errorf("Task CopySingleFile value MD5Sum is invalid"))
	}
	if !t.ValidateSize() {
		panic(fmt.Errorf("Task CopySingleFile value Size is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopySingleFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopySingleFile value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopySingleFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadMD5Sum(task, t)
	types.LoadSize(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *CopySingleFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopySingleFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopySingleFile failed: {%w}", err))
}

// NewCopySingleFile will create a CopySingleFileTask struct and fetch inherited data from parent task.
func NewCopySingleFile(task navvy.Task) *CopySingleFileTask {
	t := &CopySingleFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopySingleFileTask will create a CopySingleFileTask which meets navvy.Task.
func NewCopySingleFileTask(task navvy.Task) navvy.Task {
	return NewCopySingleFile(task)
}

// CopySmallFileTask will copy a small file between two storager.
type CopySmallFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Output value
	types.MD5Sum
	types.Offset
	types.Size
}

// validateInput will validate all input before run task.
func (t *CopySmallFileTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopySmallFile value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopySmallFile value DestinationStorage is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopySmallFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopySmallFile value SourceStorage is invalid"))
	}
	if !t.ValidateTotalSize() {
		panic(fmt.Errorf("Task CopySmallFile value TotalSize is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopySmallFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
	types.LoadTotalSize(task, t)
}

// Run implement navvy.Task
func (t *CopySmallFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopySmallFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopySmallFile failed: {%w}", err))
}

// NewCopySmallFile will create a CopySmallFileTask struct and fetch inherited data from parent task.
func NewCopySmallFile(task navvy.Task) *CopySmallFileTask {
	t := &CopySmallFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopySmallFileTask will create a CopySmallFileTask which meets navvy.Task.
func NewCopySmallFileTask(task navvy.Task) navvy.Task {
	return NewCopySmallFile(task)
}

// CopyStreamTask will copy a stream between two storager.
type CopyStreamTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Output value
	types.BytesPool
	types.PartSize
	types.SegmentID
}

// validateInput will validate all input before run task.
func (t *CopyStreamTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task CopyStream value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task CopyStream value DestinationStorage is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task CopyStream value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task CopyStream value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CopyStreamTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *CopyStreamTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyStream failed: {%w}", err))
}

// NewCopyStream will create a CopyStreamTask struct and fetch inherited data from parent task.
func NewCopyStream(task navvy.Task) *CopyStreamTask {
	t := &CopyStreamTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyStreamTask will create a CopyStreamTask which meets navvy.Task.
func NewCopyStreamTask(task navvy.Task) navvy.Task {
	return NewCopyStream(task)
}

// CreateStorageTask will create a storage.
type CreateStorageTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Service

	// Output value
	types.StorageName
	types.Zone
}

// validateInput will validate all input before run task.
func (t *CreateStorageTask) validateInput() {
	if !t.ValidateService() {
		panic(fmt.Errorf("Task CreateStorage value Service is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *CreateStorageTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadService(task, t)
}

// Run implement navvy.Task
func (t *CreateStorageTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *CreateStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CreateStorage failed: {%w}", err))
}

// NewCreateStorage will create a CreateStorageTask struct and fetch inherited data from parent task.
func NewCreateStorage(task navvy.Task) *CreateStorageTask {
	t := &CreateStorageTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCreateStorageTask will create a CreateStorageTask which meets navvy.Task.
func NewCreateStorageTask(task navvy.Task) navvy.Task {
	return NewCreateStorage(task)
}

// DeleteDirTask will will delete a dir recursively.
type DeleteDirTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
	types.PathScheduleFunc
}

// validateInput will validate all input before run task.
func (t *DeleteDirTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task DeleteDir value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task DeleteDir value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *DeleteDirTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *DeleteDirTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteDirTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteDir failed: {%w}", err))
}

// NewDeleteDir will create a DeleteDirTask struct and fetch inherited data from parent task.
func NewDeleteDir(task navvy.Task) *DeleteDirTask {
	t := &DeleteDirTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteDirTask will create a DeleteDirTask which meets navvy.Task.
func NewDeleteDirTask(task navvy.Task) navvy.Task {
	return NewDeleteDir(task)
}

// NewDeleteDirPathRequirement will create a DeleteDirTask which meets PathRequirement.
func NewDeleteDirPathRequirement(task navvy.Task) types.PathRequirement {
	return NewDeleteDir(task)
}

// DeleteFileTask will will delete a file from storage.
type DeleteFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *DeleteFileTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task DeleteFile value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task DeleteFile value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *DeleteFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *DeleteFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteFile failed: {%w}", err))
}

// NewDeleteFile will create a DeleteFileTask struct and fetch inherited data from parent task.
func NewDeleteFile(task navvy.Task) *DeleteFileTask {
	t := &DeleteFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteFileTask will create a DeleteFileTask which meets navvy.Task.
func NewDeleteFileTask(task navvy.Task) navvy.Task {
	return NewDeleteFile(task)
}

// NewDeleteFilePathRequirement will create a DeleteFileTask which meets PathRequirement.
func NewDeleteFilePathRequirement(task navvy.Task) types.PathRequirement {
	return NewDeleteFile(task)
}

// DeleteSegmentTask will delete all segments with a given path.
type DeleteSegmentTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.SegmentID
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *DeleteSegmentTask) validateInput() {
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task DeleteSegment value SegmentID is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task DeleteSegment value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *DeleteSegmentTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadSegmentID(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *DeleteSegmentTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteSegmentTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteSegment failed: {%w}", err))
}

// NewDeleteSegment will create a DeleteSegmentTask struct and fetch inherited data from parent task.
func NewDeleteSegment(task navvy.Task) *DeleteSegmentTask {
	t := &DeleteSegmentTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteSegmentTask will create a DeleteSegmentTask which meets navvy.Task.
func NewDeleteSegmentTask(task navvy.Task) navvy.Task {
	return NewDeleteSegment(task)
}

// NewDeleteSegmentSegmentIDRequirement will create a DeleteSegmentTask which meets SegmentIDRequirement.
func NewDeleteSegmentSegmentIDRequirement(task navvy.Task) types.SegmentIDRequirement {
	return NewDeleteSegment(task)
}

// DeleteSegmentDirTask will delete all segments under a path.
type DeleteSegmentDirTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *DeleteSegmentDirTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task DeleteSegmentDir value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task DeleteSegmentDir value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *DeleteSegmentDirTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *DeleteSegmentDirTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteSegmentDirTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteSegmentDir failed: {%w}", err))
}

// NewDeleteSegmentDir will create a DeleteSegmentDirTask struct and fetch inherited data from parent task.
func NewDeleteSegmentDir(task navvy.Task) *DeleteSegmentDirTask {
	t := &DeleteSegmentDirTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteSegmentDirTask will create a DeleteSegmentDirTask which meets navvy.Task.
func NewDeleteSegmentDirTask(task navvy.Task) navvy.Task {
	return NewDeleteSegmentDir(task)
}

// NewDeleteSegmentDirPathRequirement will create a DeleteSegmentDirTask which meets PathRequirement.
func NewDeleteSegmentDirPathRequirement(task navvy.Task) types.PathRequirement {
	return NewDeleteSegmentDir(task)
}

// DeleteStorageTask will delete a storage.
type DeleteStorageTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Force
	types.Service
	types.StorageName

	// Output value
}

// validateInput will validate all input before run task.
func (t *DeleteStorageTask) validateInput() {
	if !t.ValidateForce() {
		panic(fmt.Errorf("Task DeleteStorage value Force is invalid"))
	}
	if !t.ValidateService() {
		panic(fmt.Errorf("Task DeleteStorage value Service is invalid"))
	}
	if !t.ValidateStorageName() {
		panic(fmt.Errorf("Task DeleteStorage value StorageName is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *DeleteStorageTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadForce(task, t)
	types.LoadService(task, t)
	types.LoadStorageName(task, t)
}

// Run implement navvy.Task
func (t *DeleteStorageTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteStorage failed: {%w}", err))
}

// NewDeleteStorage will create a DeleteStorageTask struct and fetch inherited data from parent task.
func NewDeleteStorage(task navvy.Task) *DeleteStorageTask {
	t := &DeleteStorageTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteStorageTask will create a DeleteStorageTask which meets navvy.Task.
func NewDeleteStorageTask(task navvy.Task) navvy.Task {
	return NewDeleteStorage(task)
}

// IterateFileTask will iterate file and execute operations on it.
type IterateFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.PathScheduleFunc
	types.Recursive
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *IterateFileTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task IterateFile value Path is invalid"))
	}
	if !t.ValidatePathScheduleFunc() {
		panic(fmt.Errorf("Task IterateFile value PathScheduleFunc is invalid"))
	}
	if !t.ValidateRecursive() {
		panic(fmt.Errorf("Task IterateFile value Recursive is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task IterateFile value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *IterateFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadPathScheduleFunc(task, t)
	types.LoadRecursive(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *IterateFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *IterateFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task IterateFile failed: {%w}", err))
}

// NewIterateFile will create a IterateFileTask struct and fetch inherited data from parent task.
func NewIterateFile(task navvy.Task) *IterateFileTask {
	t := &IterateFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewIterateFileTask will create a IterateFileTask which meets navvy.Task.
func NewIterateFileTask(task navvy.Task) navvy.Task {
	return NewIterateFile(task)
}

// NewIterateFilePathRequirement will create a IterateFileTask which meets PathRequirement.
func NewIterateFilePathRequirement(task navvy.Task) types.PathRequirement {
	return NewIterateFile(task)
}

// IterateSegmentTask will iterate segment and execute operations on it.
type IterateSegmentTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.SegmentIDScheduleFunc
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *IterateSegmentTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task IterateSegment value Path is invalid"))
	}
	if !t.ValidateSegmentIDScheduleFunc() {
		panic(fmt.Errorf("Task IterateSegment value SegmentIDScheduleFunc is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task IterateSegment value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *IterateSegmentTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadSegmentIDScheduleFunc(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *IterateSegmentTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *IterateSegmentTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task IterateSegment failed: {%w}", err))
}

// NewIterateSegment will create a IterateSegmentTask struct and fetch inherited data from parent task.
func NewIterateSegment(task navvy.Task) *IterateSegmentTask {
	t := &IterateSegmentTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewIterateSegmentTask will create a IterateSegmentTask which meets navvy.Task.
func NewIterateSegmentTask(task navvy.Task) navvy.Task {
	return NewIterateSegment(task)
}

// NewIterateSegmentPathRequirement will create a IterateSegmentTask which meets PathRequirement.
func NewIterateSegmentPathRequirement(task navvy.Task) types.PathRequirement {
	return NewIterateSegment(task)
}

// ListFileTask will list files.
type ListFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Recursive
	types.Storage

	// Output value
	types.ObjectChannel
}

// validateInput will validate all input before run task.
func (t *ListFileTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task ListFile value Path is invalid"))
	}
	if !t.ValidateRecursive() {
		panic(fmt.Errorf("Task ListFile value Recursive is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task ListFile value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *ListFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadRecursive(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *ListFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *ListFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ListFile failed: {%w}", err))
}

// NewListFile will create a ListFileTask struct and fetch inherited data from parent task.
func NewListFile(task navvy.Task) *ListFileTask {
	t := &ListFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewListFileTask will create a ListFileTask which meets navvy.Task.
func NewListFileTask(task navvy.Task) navvy.Task {
	return NewListFile(task)
}

// NewListFilePathRequirement will create a ListFileTask which meets PathRequirement.
func NewListFilePathRequirement(task navvy.Task) types.PathRequirement {
	return NewListFile(task)
}

// ListSegmentTask will list segments.
type ListSegmentTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
	types.SegmentChannel
}

// validateInput will validate all input before run task.
func (t *ListSegmentTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task ListSegment value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task ListSegment value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *ListSegmentTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *ListSegmentTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *ListSegmentTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ListSegment failed: {%w}", err))
}

// NewListSegment will create a ListSegmentTask struct and fetch inherited data from parent task.
func NewListSegment(task navvy.Task) *ListSegmentTask {
	t := &ListSegmentTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewListSegmentTask will create a ListSegmentTask which meets navvy.Task.
func NewListSegmentTask(task navvy.Task) navvy.Task {
	return NewListSegment(task)
}

// NewListSegmentPathRequirement will create a ListSegmentTask which meets PathRequirement.
func NewListSegmentPathRequirement(task navvy.Task) types.PathRequirement {
	return NewListSegment(task)
}

// ListStorageTask will send get request to get bucket list.
type ListStorageTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Service

	// Output value
	types.BucketList
	types.Zone
}

// validateInput will validate all input before run task.
func (t *ListStorageTask) validateInput() {
	if !t.ValidateService() {
		panic(fmt.Errorf("Task ListStorage value Service is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *ListStorageTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadService(task, t)
}

// Run implement navvy.Task
func (t *ListStorageTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *ListStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ListStorage failed: {%w}", err))
}

// NewListStorage will create a ListStorageTask struct and fetch inherited data from parent task.
func NewListStorage(task navvy.Task) *ListStorageTask {
	t := &ListStorageTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewListStorageTask will create a ListStorageTask which meets navvy.Task.
func NewListStorageTask(task navvy.Task) navvy.Task {
	return NewListStorage(task)
}

// MD5SumFileTask will get file's md5 sum.
type MD5SumFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Offset
	types.Size
	types.SourcePath
	types.SourceStorage

	// Output value
	types.MD5Sum
}

// validateInput will validate all input before run task.
func (t *MD5SumFileTask) validateInput() {
	if !t.ValidateOffset() {
		panic(fmt.Errorf("Task MD5SumFile value Offset is invalid"))
	}
	if !t.ValidateSize() {
		panic(fmt.Errorf("Task MD5SumFile value Size is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task MD5SumFile value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task MD5SumFile value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *MD5SumFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadOffset(task, t)
	types.LoadSize(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *MD5SumFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *MD5SumFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task MD5SumFile failed: {%w}", err))
}

// NewMD5SumFile will create a MD5SumFileTask struct and fetch inherited data from parent task.
func NewMD5SumFile(task navvy.Task) *MD5SumFileTask {
	t := &MD5SumFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewMD5SumFileTask will create a MD5SumFileTask which meets navvy.Task.
func NewMD5SumFileTask(task navvy.Task) navvy.Task {
	return NewMD5SumFile(task)
}

// MD5SumStreamTask will get stream's md5 sum.
type MD5SumStreamTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Content

	// Output value
	types.MD5Sum
}

// validateInput will validate all input before run task.
func (t *MD5SumStreamTask) validateInput() {
	if !t.ValidateContent() {
		panic(fmt.Errorf("Task MD5SumStream value Content is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *MD5SumStreamTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadContent(task, t)
}

// Run implement navvy.Task
func (t *MD5SumStreamTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *MD5SumStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task MD5SumStream failed: {%w}", err))
}

// NewMD5SumStream will create a MD5SumStreamTask struct and fetch inherited data from parent task.
func NewMD5SumStream(task navvy.Task) *MD5SumStreamTask {
	t := &MD5SumStreamTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewMD5SumStreamTask will create a MD5SumStreamTask which meets navvy.Task.
func NewMD5SumStreamTask(task navvy.Task) navvy.Task {
	return NewMD5SumStream(task)
}

// ReachFileTask will will reach a remote object and return the signed url.
type ReachFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Expire
	types.Path
	types.Storage

	// Output value
	types.URL
}

// validateInput will validate all input before run task.
func (t *ReachFileTask) validateInput() {
	if !t.ValidateExpire() {
		panic(fmt.Errorf("Task ReachFile value Expire is invalid"))
	}
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task ReachFile value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task ReachFile value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *ReachFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadExpire(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *ReachFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *ReachFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ReachFile failed: {%w}", err))
}

// NewReachFile will create a ReachFileTask struct and fetch inherited data from parent task.
func NewReachFile(task navvy.Task) *ReachFileTask {
	t := &ReachFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewReachFileTask will create a ReachFileTask which meets navvy.Task.
func NewReachFileTask(task navvy.Task) navvy.Task {
	return NewReachFile(task)
}

// NewReachFilePathRequirement will create a ReachFileTask which meets PathRequirement.
func NewReachFilePathRequirement(task navvy.Task) types.PathRequirement {
	return NewReachFile(task)
}

// SegmentAbortAllTask will abort all multipart uploads in a bucket.
type SegmentAbortAllTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Storage
	types.StorageName

	// Output value
}

// validateInput will validate all input before run task.
func (t *SegmentAbortAllTask) validateInput() {
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task SegmentAbortAll value Storage is invalid"))
	}
	if !t.ValidateStorageName() {
		panic(fmt.Errorf("Task SegmentAbortAll value StorageName is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *SegmentAbortAllTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadStorage(task, t)
	types.LoadStorageName(task, t)
}

// Run implement navvy.Task
func (t *SegmentAbortAllTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentAbortAllTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentAbortAll failed: {%w}", err))
}

// NewSegmentAbortAll will create a SegmentAbortAllTask struct and fetch inherited data from parent task.
func NewSegmentAbortAll(task navvy.Task) *SegmentAbortAllTask {
	t := &SegmentAbortAllTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentAbortAllTask will create a SegmentAbortAllTask which meets navvy.Task.
func NewSegmentAbortAllTask(task navvy.Task) navvy.Task {
	return NewSegmentAbortAll(task)
}

// SegmentCompleteTask will complete a segment.
type SegmentCompleteTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.SegmentID
	types.Storage

	// Output value
}

// validateInput will validate all input before run task.
func (t *SegmentCompleteTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task SegmentComplete value Path is invalid"))
	}
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task SegmentComplete value SegmentID is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task SegmentComplete value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *SegmentCompleteTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadSegmentID(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *SegmentCompleteTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentCompleteTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentComplete failed: {%w}", err))
}

// NewSegmentComplete will create a SegmentCompleteTask struct and fetch inherited data from parent task.
func NewSegmentComplete(task navvy.Task) *SegmentCompleteTask {
	t := &SegmentCompleteTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentCompleteTask will create a SegmentCompleteTask which meets navvy.Task.
func NewSegmentCompleteTask(task navvy.Task) navvy.Task {
	return NewSegmentComplete(task)
}

// NewSegmentCompletePathRequirement will create a SegmentCompleteTask which meets PathRequirement.
func NewSegmentCompletePathRequirement(task navvy.Task) types.PathRequirement {
	return NewSegmentComplete(task)
}

// NewSegmentCompleteSegmentIDRequirement will create a SegmentCompleteTask which meets SegmentIDRequirement.
func NewSegmentCompleteSegmentIDRequirement(task navvy.Task) types.SegmentIDRequirement {
	return NewSegmentComplete(task)
}

// SegmentFileCopyTask will copy a segment file.
type SegmentFileCopyTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size
	types.SourcePath
	types.SourceStorage

	// Output value
}

// validateInput will validate all input before run task.
func (t *SegmentFileCopyTask) validateInput() {
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task SegmentFileCopy value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task SegmentFileCopy value DestinationStorage is invalid"))
	}
	if !t.ValidateMD5Sum() {
		panic(fmt.Errorf("Task SegmentFileCopy value MD5Sum is invalid"))
	}
	if !t.ValidateOffset() {
		panic(fmt.Errorf("Task SegmentFileCopy value Offset is invalid"))
	}
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task SegmentFileCopy value SegmentID is invalid"))
	}
	if !t.ValidateSize() {
		panic(fmt.Errorf("Task SegmentFileCopy value Size is invalid"))
	}
	if !t.ValidateSourcePath() {
		panic(fmt.Errorf("Task SegmentFileCopy value SourcePath is invalid"))
	}
	if !t.ValidateSourceStorage() {
		panic(fmt.Errorf("Task SegmentFileCopy value SourceStorage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *SegmentFileCopyTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadMD5Sum(task, t)
	types.LoadOffset(task, t)
	types.LoadSegmentID(task, t)
	types.LoadSize(task, t)
	types.LoadSourcePath(task, t)
	types.LoadSourceStorage(task, t)
}

// Run implement navvy.Task
func (t *SegmentFileCopyTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentFileCopyTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentFileCopy failed: {%w}", err))
}

// NewSegmentFileCopy will create a SegmentFileCopyTask struct and fetch inherited data from parent task.
func NewSegmentFileCopy(task navvy.Task) *SegmentFileCopyTask {
	t := &SegmentFileCopyTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentFileCopyTask will create a SegmentFileCopyTask which meets navvy.Task.
func NewSegmentFileCopyTask(task navvy.Task) navvy.Task {
	return NewSegmentFileCopy(task)
}

// SegmentInitTask will init a segment upload.
type SegmentInitTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
	types.SegmentID
}

// validateInput will validate all input before run task.
func (t *SegmentInitTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task SegmentInit value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task SegmentInit value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *SegmentInitTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *SegmentInitTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentInitTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentInit failed: {%w}", err))
}

// NewSegmentInit will create a SegmentInitTask struct and fetch inherited data from parent task.
func NewSegmentInit(task navvy.Task) *SegmentInitTask {
	t := &SegmentInitTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentInitTask will create a SegmentInitTask which meets navvy.Task.
func NewSegmentInitTask(task navvy.Task) navvy.Task {
	return NewSegmentInit(task)
}

// NewSegmentInitPathRequirement will create a SegmentInitTask which meets PathRequirement.
func NewSegmentInitPathRequirement(task navvy.Task) types.PathRequirement {
	return NewSegmentInit(task)
}

// NewSegmentInitSegmentIDRequirement will create a SegmentInitTask which meets SegmentIDRequirement.
func NewSegmentInitSegmentIDRequirement(task navvy.Task) types.SegmentIDRequirement {
	return NewSegmentInit(task)
}

// SegmentStreamCopyTask will copy a segment stream.
type SegmentStreamCopyTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Content
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size

	// Output value
}

// validateInput will validate all input before run task.
func (t *SegmentStreamCopyTask) validateInput() {
	if !t.ValidateContent() {
		panic(fmt.Errorf("Task SegmentStreamCopy value Content is invalid"))
	}
	if !t.ValidateDestinationPath() {
		panic(fmt.Errorf("Task SegmentStreamCopy value DestinationPath is invalid"))
	}
	if !t.ValidateDestinationStorage() {
		panic(fmt.Errorf("Task SegmentStreamCopy value DestinationStorage is invalid"))
	}
	if !t.ValidateMD5Sum() {
		panic(fmt.Errorf("Task SegmentStreamCopy value MD5Sum is invalid"))
	}
	if !t.ValidateOffset() {
		panic(fmt.Errorf("Task SegmentStreamCopy value Offset is invalid"))
	}
	if !t.ValidateSegmentID() {
		panic(fmt.Errorf("Task SegmentStreamCopy value SegmentID is invalid"))
	}
	if !t.ValidateSize() {
		panic(fmt.Errorf("Task SegmentStreamCopy value Size is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *SegmentStreamCopyTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadContent(task, t)
	types.LoadDestinationPath(task, t)
	types.LoadDestinationStorage(task, t)
	types.LoadMD5Sum(task, t)
	types.LoadOffset(task, t)
	types.LoadSegmentID(task, t)
	types.LoadSize(task, t)
}

// Run implement navvy.Task
func (t *SegmentStreamCopyTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentStreamCopyTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentStreamCopy failed: {%w}", err))
}

// NewSegmentStreamCopy will create a SegmentStreamCopyTask struct and fetch inherited data from parent task.
func NewSegmentStreamCopy(task navvy.Task) *SegmentStreamCopyTask {
	t := &SegmentStreamCopyTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentStreamCopyTask will create a SegmentStreamCopyTask which meets navvy.Task.
func NewSegmentStreamCopyTask(task navvy.Task) navvy.Task {
	return NewSegmentStreamCopy(task)
}

// StatFileTask will stat a remote object by request headObject.
type StatFileTask struct {
	// Predefined value
	types.Fault
	types.ID
	types.Pool
	types.Scheduler

	// Input value
	types.Path
	types.Storage

	// Output value
	types.Object
}

// validateInput will validate all input before run task.
func (t *StatFileTask) validateInput() {
	if !t.ValidatePath() {
		panic(fmt.Errorf("Task StatFile value Path is invalid"))
	}
	if !t.ValidateStorage() {
		panic(fmt.Errorf("Task StatFile value Storage is invalid"))
	}
}

// loadInput will check and load all input before new task.
func (t *StatFileTask) loadInput(task navvy.Task) {
	types.LoadFault(task, t)
	types.LoadPool(task, t)
	types.LoadPath(task, t)
	types.LoadStorage(task, t)
}

// Run implement navvy.Task
func (t *StatFileTask) Run() {
	t.validateInput()

	t.run()
	t.GetScheduler().Wait()
}

func (t *StatFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task StatFile failed: {%w}", err))
}

// NewStatFile will create a StatFileTask struct and fetch inherited data from parent task.
func NewStatFile(task navvy.Task) *StatFileTask {
	t := &StatFileTask{}
	t.SetID(uuid.New().String())

	t.loadInput(task)
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewStatFileTask will create a StatFileTask which meets navvy.Task.
func NewStatFileTask(task navvy.Task) navvy.Task {
	return NewStatFile(task)
}

// NewStatFilePathRequirement will create a StatFileTask which meets PathRequirement.
func NewStatFilePathRequirement(task navvy.Task) types.PathRequirement {
	return NewStatFile(task)
}
