// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/schedule"
	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// CopyFileTask will copy a file between two storager.
type CopyFileTask struct {
	types.CopyFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyFile failed: {%w}", err))
}

// NewCopyFile will create a CopyFileTask struct and fetch inherited data from parent task.
func NewCopyFile(task navvy.Task) *CopyFileTask {
	t := &CopyFileTask{
		CopyFileRequirement: task.(types.CopyFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyFileTask will create a CopyFileTask which meets navvy.Task.
func NewCopyFileTask(task navvy.Task) navvy.Task {
	return NewCopyFile(task)
}

// copyFileShimTask will Storage shim task for CopyFile.
type copyFileShimTask struct {
	types.CopyFileShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copyFileShimTask) Run() {}

// NewCopyFileShim will create a copyFileShimTask struct and fetch inherited data from parent task.
func NewCopyFileShim(task navvy.Task) *copyFileShimTask {
	t := &copyFileShimTask{
		CopyFileShimRequirement: task.(types.CopyFileShimRequirement),
	}
	return t
}

// CopyLargeFileTask will copy a large file between two storager.
type CopyLargeFileTask struct {
	types.CopyLargeFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
}

// Run implement navvy.Task
func (t *CopyLargeFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyLargeFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyLargeFile failed: {%w}", err))
}

// NewCopyLargeFile will create a CopyLargeFileTask struct and fetch inherited data from parent task.
func NewCopyLargeFile(task navvy.Task) *CopyLargeFileTask {
	t := &CopyLargeFileTask{
		CopyLargeFileRequirement: task.(types.CopyLargeFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyLargeFileTask will create a CopyLargeFileTask which meets navvy.Task.
func NewCopyLargeFileTask(task navvy.Task) navvy.Task {
	return NewCopyLargeFile(task)
}

// copyLargeFileShimTask will Storage shim task for CopyLargeFile.
type copyLargeFileShimTask struct {
	types.CopyLargeFileShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copyLargeFileShimTask) Run() {}

// NewCopyLargeFileShim will create a copyLargeFileShimTask struct and fetch inherited data from parent task.
func NewCopyLargeFileShim(task navvy.Task) *copyLargeFileShimTask {
	t := &copyLargeFileShimTask{
		CopyLargeFileShimRequirement: task.(types.CopyLargeFileShimRequirement),
	}
	return t
}

// CopyPartialFileTask will copy a partial file to between two storager.
type CopyPartialFileTask struct {
	types.CopyPartialFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
}

// Run implement navvy.Task
func (t *CopyPartialFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyPartialFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyPartialFile failed: {%w}", err))
}

// NewCopyPartialFile will create a CopyPartialFileTask struct and fetch inherited data from parent task.
func NewCopyPartialFile(task navvy.Task) *CopyPartialFileTask {
	t := &CopyPartialFileTask{
		CopyPartialFileRequirement: task.(types.CopyPartialFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyPartialFileTask will create a CopyPartialFileTask which meets navvy.Task.
func NewCopyPartialFileTask(task navvy.Task) navvy.Task {
	return NewCopyPartialFile(task)
}

// copyPartialFileShimTask will Storage shim task for CopyPartialFile.
type copyPartialFileShimTask struct {
	types.CopyPartialFileShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copyPartialFileShimTask) Run() {}

// NewCopyPartialFileShim will create a copyPartialFileShimTask struct and fetch inherited data from parent task.
func NewCopyPartialFileShim(task navvy.Task) *copyPartialFileShimTask {
	t := &copyPartialFileShimTask{
		CopyPartialFileShimRequirement: task.(types.CopyPartialFileShimRequirement),
	}
	return t
}

// CopyPartialStreamTask will copy a partial stream between two storager.
type CopyPartialStreamTask struct {
	types.CopyPartialStreamRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.Content
	types.MD5Sum
}

// Run implement navvy.Task
func (t *CopyPartialStreamTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyPartialStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyPartialStream failed: {%w}", err))
}

// NewCopyPartialStream will create a CopyPartialStreamTask struct and fetch inherited data from parent task.
func NewCopyPartialStream(task navvy.Task) *CopyPartialStreamTask {
	t := &CopyPartialStreamTask{
		CopyPartialStreamRequirement: task.(types.CopyPartialStreamRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyPartialStreamTask will create a CopyPartialStreamTask which meets navvy.Task.
func NewCopyPartialStreamTask(task navvy.Task) navvy.Task {
	return NewCopyPartialStream(task)
}

// copyPartialStreamShimTask will Storage shim task for CopyPartialStream.
type copyPartialStreamShimTask struct {
	types.CopyPartialStreamShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copyPartialStreamShimTask) Run() {}

// NewCopyPartialStreamShim will create a copyPartialStreamShimTask struct and fetch inherited data from parent task.
func NewCopyPartialStreamShim(task navvy.Task) *copyPartialStreamShimTask {
	t := &copyPartialStreamShimTask{
		CopyPartialStreamShimRequirement: task.(types.CopyPartialStreamShimRequirement),
	}
	return t
}

// CopySingleFileTask will execute a file copy operation between towo storager.
type CopySingleFileTask struct {
	types.CopySingleFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *CopySingleFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopySingleFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopySingleFile failed: {%w}", err))
}

// NewCopySingleFile will create a CopySingleFileTask struct and fetch inherited data from parent task.
func NewCopySingleFile(task navvy.Task) *CopySingleFileTask {
	t := &CopySingleFileTask{
		CopySingleFileRequirement: task.(types.CopySingleFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopySingleFileTask will create a CopySingleFileTask which meets navvy.Task.
func NewCopySingleFileTask(task navvy.Task) navvy.Task {
	return NewCopySingleFile(task)
}

// copySingleFileShimTask will Storage shim task for CopySingleFile.
type copySingleFileShimTask struct {
	types.CopySingleFileShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copySingleFileShimTask) Run() {}

// NewCopySingleFileShim will create a copySingleFileShimTask struct and fetch inherited data from parent task.
func NewCopySingleFileShim(task navvy.Task) *copySingleFileShimTask {
	t := &copySingleFileShimTask{
		CopySingleFileShimRequirement: task.(types.CopySingleFileShimRequirement),
	}
	return t
}

// CopySmallFileTask will copy a small file between two storager.
type CopySmallFileTask struct {
	types.CopySmallFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopySmallFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopySmallFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopySmallFile failed: {%w}", err))
}

// NewCopySmallFile will create a CopySmallFileTask struct and fetch inherited data from parent task.
func NewCopySmallFile(task navvy.Task) *CopySmallFileTask {
	t := &CopySmallFileTask{
		CopySmallFileRequirement: task.(types.CopySmallFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopySmallFileTask will create a CopySmallFileTask which meets navvy.Task.
func NewCopySmallFileTask(task navvy.Task) navvy.Task {
	return NewCopySmallFile(task)
}

// copySmallFileShimTask will Storage shim task for CopySmallFile.
type copySmallFileShimTask struct {
	types.CopySmallFileShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copySmallFileShimTask) Run() {}

// NewCopySmallFileShim will create a copySmallFileShimTask struct and fetch inherited data from parent task.
func NewCopySmallFileShim(task navvy.Task) *copySmallFileShimTask {
	t := &copySmallFileShimTask{
		CopySmallFileShimRequirement: task.(types.CopySmallFileShimRequirement),
	}
	return t
}

// CopyStreamTask will copy a stream between two storager.
type CopyStreamTask struct {
	types.CopyStreamRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.BytesPool
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyStreamTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CopyStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CopyStream failed: {%w}", err))
}

// NewCopyStream will create a CopyStreamTask struct and fetch inherited data from parent task.
func NewCopyStream(task navvy.Task) *CopyStreamTask {
	t := &CopyStreamTask{
		CopyStreamRequirement: task.(types.CopyStreamRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCopyStreamTask will create a CopyStreamTask which meets navvy.Task.
func NewCopyStreamTask(task navvy.Task) navvy.Task {
	return NewCopyStream(task)
}

// copyStreamShimTask will Storage shim task for CopyStream.
type copyStreamShimTask struct {
	types.CopyStreamShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *copyStreamShimTask) Run() {}

// NewCopyStreamShim will create a copyStreamShimTask struct and fetch inherited data from parent task.
func NewCopyStreamShim(task navvy.Task) *copyStreamShimTask {
	t := &copyStreamShimTask{
		CopyStreamShimRequirement: task.(types.CopyStreamShimRequirement),
	}
	return t
}

// CreateStorageTask will create a storage.
type CreateStorageTask struct {
	types.CreateStorageRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.StorageName
	types.Zone
}

// Run implement navvy.Task
func (t *CreateStorageTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *CreateStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task CreateStorage failed: {%w}", err))
}

// NewCreateStorage will create a CreateStorageTask struct and fetch inherited data from parent task.
func NewCreateStorage(task navvy.Task) *CreateStorageTask {
	t := &CreateStorageTask{
		CreateStorageRequirement: task.(types.CreateStorageRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewCreateStorageTask will create a CreateStorageTask which meets navvy.Task.
func NewCreateStorageTask(task navvy.Task) navvy.Task {
	return NewCreateStorage(task)
}

// DeleteDirTask will will delete a dir recursively.
type DeleteDirTask struct {
	types.DeleteDirRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.PathScheduleFunc
	types.Recursive
}

// Run implement navvy.Task
func (t *DeleteDirTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteDirTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteDir failed: {%w}", err))
}

// NewDeleteDir will create a DeleteDirTask struct and fetch inherited data from parent task.
func NewDeleteDir(task navvy.Task) *DeleteDirTask {
	t := &DeleteDirTask{
		DeleteDirRequirement: task.(types.DeleteDirRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteDirTask will create a DeleteDirTask which meets navvy.Task.
func NewDeleteDirTask(task navvy.Task) navvy.Task {
	return NewDeleteDir(task)
}

// DeleteFileTask will will delete a file from storage.
type DeleteFileTask struct {
	types.DeleteFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.Path
}

// Run implement navvy.Task
func (t *DeleteFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteFile failed: {%w}", err))
}

// NewDeleteFile will create a DeleteFileTask struct and fetch inherited data from parent task.
func NewDeleteFile(task navvy.Task) *DeleteFileTask {
	t := &DeleteFileTask{
		DeleteFileRequirement: task.(types.DeleteFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteFileTask will create a DeleteFileTask which meets navvy.Task.
func NewDeleteFileTask(task navvy.Task) navvy.Task {
	return NewDeleteFile(task)
}

// NewDeleteFilePathParametricTask will create a DeleteFileTask which meets types.PathParametricRequirement.
func NewDeleteFilePathParametricTask(task navvy.Task) types.PathParametricRequirement {
	return NewDeleteFile(task)
}

// DeleteSegmentTask will .
type DeleteSegmentTask struct {
	types.DeleteSegmentRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *DeleteSegmentTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteSegmentTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteSegment failed: {%w}", err))
}

// NewDeleteSegment will create a DeleteSegmentTask struct and fetch inherited data from parent task.
func NewDeleteSegment(task navvy.Task) *DeleteSegmentTask {
	t := &DeleteSegmentTask{
		DeleteSegmentRequirement: task.(types.DeleteSegmentRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteSegmentTask will create a DeleteSegmentTask which meets navvy.Task.
func NewDeleteSegmentTask(task navvy.Task) navvy.Task {
	return NewDeleteSegment(task)
}

// DeleteStorageTask will delete a storage.
type DeleteStorageTask struct {
	types.DeleteStorageRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.StorageName
}

// Run implement navvy.Task
func (t *DeleteStorageTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteStorage failed: {%w}", err))
}

// NewDeleteStorage will create a DeleteStorageTask struct and fetch inherited data from parent task.
func NewDeleteStorage(task navvy.Task) *DeleteStorageTask {
	t := &DeleteStorageTask{
		DeleteStorageRequirement: task.(types.DeleteStorageRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteStorageTask will create a DeleteStorageTask which meets navvy.Task.
func NewDeleteStorageTask(task navvy.Task) navvy.Task {
	return NewDeleteStorage(task)
}

// DeleteStorageForceTask will remove a bucket force.
type DeleteStorageForceTask struct {
	types.DeleteStorageForceRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
}

// Run implement navvy.Task
func (t *DeleteStorageForceTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *DeleteStorageForceTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task DeleteStorageForce failed: {%w}", err))
}

// NewDeleteStorageForce will create a DeleteStorageForceTask struct and fetch inherited data from parent task.
func NewDeleteStorageForce(task navvy.Task) *DeleteStorageForceTask {
	t := &DeleteStorageForceTask{
		DeleteStorageForceRequirement: task.(types.DeleteStorageForceRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewDeleteStorageForceTask will create a DeleteStorageForceTask which meets navvy.Task.
func NewDeleteStorageForceTask(task navvy.Task) navvy.Task {
	return NewDeleteStorageForce(task)
}

// IterateFileTask will iterate file and execute operations on it.
type IterateFileTask struct {
	types.IterateFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.Path
}

// Run implement navvy.Task
func (t *IterateFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *IterateFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task IterateFile failed: {%w}", err))
}

// NewIterateFile will create a IterateFileTask struct and fetch inherited data from parent task.
func NewIterateFile(task navvy.Task) *IterateFileTask {
	t := &IterateFileTask{
		IterateFileRequirement: task.(types.IterateFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewIterateFileTask will create a IterateFileTask which meets navvy.Task.
func NewIterateFileTask(task navvy.Task) navvy.Task {
	return NewIterateFile(task)
}

// NewIterateFilePathParametricTask will create a IterateFileTask which meets types.PathParametricRequirement.
func NewIterateFilePathParametricTask(task navvy.Task) types.PathParametricRequirement {
	return NewIterateFile(task)
}

// ListFileTask will list files.
type ListFileTask struct {
	types.ListFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.Recursive
}

// Run implement navvy.Task
func (t *ListFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *ListFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ListFile failed: {%w}", err))
}

// NewListFile will create a ListFileTask struct and fetch inherited data from parent task.
func NewListFile(task navvy.Task) *ListFileTask {
	t := &ListFileTask{
		ListFileRequirement: task.(types.ListFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewListFileTask will create a ListFileTask which meets navvy.Task.
func NewListFileTask(task navvy.Task) navvy.Task {
	return NewListFile(task)
}

// ListStorageTask will send get request to get bucket list.
type ListStorageTask struct {
	types.ListStorageRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
	types.Zone
}

// Run implement navvy.Task
func (t *ListStorageTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *ListStorageTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ListStorage failed: {%w}", err))
}

// NewListStorage will create a ListStorageTask struct and fetch inherited data from parent task.
func NewListStorage(task navvy.Task) *ListStorageTask {
	t := &ListStorageTask{
		ListStorageRequirement: task.(types.ListStorageRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewListStorageTask will create a ListStorageTask which meets navvy.Task.
func NewListStorageTask(task navvy.Task) navvy.Task {
	return NewListStorage(task)
}

// MD5SumFileTask will get file's md5 sum.
type MD5SumFileTask struct {
	types.MD5SumFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MD5SumFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *MD5SumFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task MD5SumFile failed: {%w}", err))
}

// NewMD5SumFile will create a MD5SumFileTask struct and fetch inherited data from parent task.
func NewMD5SumFile(task navvy.Task) *MD5SumFileTask {
	t := &MD5SumFileTask{
		MD5SumFileRequirement: task.(types.MD5SumFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewMD5SumFileTask will create a MD5SumFileTask which meets navvy.Task.
func NewMD5SumFileTask(task navvy.Task) navvy.Task {
	return NewMD5SumFile(task)
}

// MD5SumStreamTask will get stream's md5 sum.
type MD5SumStreamTask struct {
	types.MD5SumStreamRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
}

// Run implement navvy.Task
func (t *MD5SumStreamTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *MD5SumStreamTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task MD5SumStream failed: {%w}", err))
}

// NewMD5SumStream will create a MD5SumStreamTask struct and fetch inherited data from parent task.
func NewMD5SumStream(task navvy.Task) *MD5SumStreamTask {
	t := &MD5SumStreamTask{
		MD5SumStreamRequirement: task.(types.MD5SumStreamRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewMD5SumStreamTask will create a MD5SumStreamTask which meets navvy.Task.
func NewMD5SumStreamTask(task navvy.Task) navvy.Task {
	return NewMD5SumStream(task)
}

// ReachFileTask will will reach a remote object and return the signed url.
type ReachFileTask struct {
	types.ReachFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.Expire
	types.URL
}

// Run implement navvy.Task
func (t *ReachFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *ReachFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task ReachFile failed: {%w}", err))
}

// NewReachFile will create a ReachFileTask struct and fetch inherited data from parent task.
func NewReachFile(task navvy.Task) *ReachFileTask {
	t := &ReachFileTask{
		ReachFileRequirement: task.(types.ReachFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewReachFileTask will create a ReachFileTask which meets navvy.Task.
func NewReachFileTask(task navvy.Task) navvy.Task {
	return NewReachFile(task)
}

// SegmentAbortAllTask will abort all multipart uploads in a bucket.
type SegmentAbortAllTask struct {
	types.SegmentAbortAllRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentAbortAllTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentAbortAllTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentAbortAll failed: {%w}", err))
}

// NewSegmentAbortAll will create a SegmentAbortAllTask struct and fetch inherited data from parent task.
func NewSegmentAbortAll(task navvy.Task) *SegmentAbortAllTask {
	t := &SegmentAbortAllTask{
		SegmentAbortAllRequirement: task.(types.SegmentAbortAllRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentAbortAllTask will create a SegmentAbortAllTask which meets navvy.Task.
func NewSegmentAbortAllTask(task navvy.Task) navvy.Task {
	return NewSegmentAbortAll(task)
}

// SegmentCompleteTask will complete a segment.
type SegmentCompleteTask struct {
	types.SegmentCompleteRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentCompleteTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentCompleteTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentComplete failed: {%w}", err))
}

// NewSegmentComplete will create a SegmentCompleteTask struct and fetch inherited data from parent task.
func NewSegmentComplete(task navvy.Task) *SegmentCompleteTask {
	t := &SegmentCompleteTask{
		SegmentCompleteRequirement: task.(types.SegmentCompleteRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentCompleteTask will create a SegmentCompleteTask which meets navvy.Task.
func NewSegmentCompleteTask(task navvy.Task) navvy.Task {
	return NewSegmentComplete(task)
}

// SegmentFileCopyTask will copy a segment file.
type SegmentFileCopyTask struct {
	types.SegmentFileCopyRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentFileCopyTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentFileCopyTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentFileCopy failed: {%w}", err))
}

// NewSegmentFileCopy will create a SegmentFileCopyTask struct and fetch inherited data from parent task.
func NewSegmentFileCopy(task navvy.Task) *SegmentFileCopyTask {
	t := &SegmentFileCopyTask{
		SegmentFileCopyRequirement: task.(types.SegmentFileCopyRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentFileCopyTask will create a SegmentFileCopyTask which meets navvy.Task.
func NewSegmentFileCopyTask(task navvy.Task) navvy.Task {
	return NewSegmentFileCopy(task)
}

// segmentFileCopyShimTask will Storage shim task for SegmentFileCopy.
type segmentFileCopyShimTask struct {
	types.SegmentFileCopyShimRequirement

	// Runtime value
	types.Storage
	types.Path
}

// Run implement navvy.Task
func (t *segmentFileCopyShimTask) Run() {}

// NewSegmentFileCopyShim will create a segmentFileCopyShimTask struct and fetch inherited data from parent task.
func NewSegmentFileCopyShim(task navvy.Task) *segmentFileCopyShimTask {
	t := &segmentFileCopyShimTask{
		SegmentFileCopyShimRequirement: task.(types.SegmentFileCopyShimRequirement),
	}
	return t
}

// SegmentInitTask will init a segment upload.
type SegmentInitTask struct {
	types.SegmentInitRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentInitTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentInitTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentInit failed: {%w}", err))
}

// NewSegmentInit will create a SegmentInitTask struct and fetch inherited data from parent task.
func NewSegmentInit(task navvy.Task) *SegmentInitTask {
	t := &SegmentInitTask{
		SegmentInitRequirement: task.(types.SegmentInitRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentInitTask will create a SegmentInitTask which meets navvy.Task.
func NewSegmentInitTask(task navvy.Task) navvy.Task {
	return NewSegmentInit(task)
}

// SegmentStreamCopyTask will copy a segment stream.
type SegmentStreamCopyTask struct {
	types.SegmentStreamCopyRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentStreamCopyTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *SegmentStreamCopyTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task SegmentStreamCopy failed: {%w}", err))
}

// NewSegmentStreamCopy will create a SegmentStreamCopyTask struct and fetch inherited data from parent task.
func NewSegmentStreamCopy(task navvy.Task) *SegmentStreamCopyTask {
	t := &SegmentStreamCopyTask{
		SegmentStreamCopyRequirement: task.(types.SegmentStreamCopyRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewSegmentStreamCopyTask will create a SegmentStreamCopyTask which meets navvy.Task.
func NewSegmentStreamCopyTask(task navvy.Task) navvy.Task {
	return NewSegmentStreamCopy(task)
}

// StatFileTask will stat a remote object by request headObject.
type StatFileTask struct {
	types.StatFileRequirement

	// Predefined runtime value
	types.ID
	types.Scheduler

	// Runtime value
	types.Object
}

// Run implement navvy.Task
func (t *StatFileTask) Run() {
	t.run()
	t.GetScheduler().Wait()
}

func (t *StatFileTask) TriggerFault(err error) {
	t.GetFault().Append(fmt.Errorf("Task StatFile failed: {%w}", err))
}

// NewStatFile will create a StatFileTask struct and fetch inherited data from parent task.
func NewStatFile(task navvy.Task) *StatFileTask {
	t := &StatFileTask{
		StatFileRequirement: task.(types.StatFileRequirement),
	}
	t.SetID(uuid.New().String())
	t.SetScheduler(schedule.NewScheduler(t.GetPool()))

	t.new()
	return t
}

// NewStatFileTask will create a StatFileTask which meets navvy.Task.
func NewStatFileTask(task navvy.Task) navvy.Task {
	return NewStatFile(task)
}
