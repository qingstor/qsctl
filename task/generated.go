// Code generated by go generate; DO NOT EDIT.
package task

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// copyFileTaskRequirement is the requirement for execute CopyFileTask.
type copyFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyFileTask is the mock task for CopyFileTask.
type mockCopyFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyFileTask) Run() {
	panic("mockCopyFileTask should not be run.")
}

// CopyFileTask will copy a file between two storager.
type CopyFileTask struct {
	copyFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyFileTask) Run() {
	t.run()
}

func (t *CopyFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyFile failed: {%w}", err))
}

func newCopyFileTask(task navvy.Task) *CopyFileTask {
	t := &CopyFileTask{
		copyFileTaskRequirement: task.(copyFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopyFileTask will create a CopyFileTask and fetch inherited data from parent task.
func NewCopyFileTask(task navvy.Task) navvy.Task {
	return newCopyFileTask(task)
}

// copyLargeFileTaskRequirement is the requirement for execute CopyLargeFileTask.
type copyLargeFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopyLargeFileTask is the mock task for CopyLargeFileTask.
type mockCopyLargeFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopyLargeFileTask) Run() {
	panic("mockCopyLargeFileTask should not be run.")
}

// CopyLargeFileTask will copy a large file between two storager.
type CopyLargeFileTask struct {
	copyLargeFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
}

// Run implement navvy.Task
func (t *CopyLargeFileTask) Run() {
	t.run()
}

func (t *CopyLargeFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyLargeFile failed: {%w}", err))
}

func newCopyLargeFileTask(task navvy.Task) *CopyLargeFileTask {
	t := &CopyLargeFileTask{
		copyLargeFileTaskRequirement: task.(copyLargeFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopyLargeFileTask will create a CopyLargeFileTask and fetch inherited data from parent task.
func NewCopyLargeFileTask(task navvy.Task) navvy.Task {
	return newCopyLargeFileTask(task)
}

// copyPartialFileTaskRequirement is the requirement for execute CopyPartialFileTask.
type copyPartialFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopyPartialFileTask is the mock task for CopyPartialFileTask.
type mockCopyPartialFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopyPartialFileTask) Run() {
	panic("mockCopyPartialFileTask should not be run.")
}

// CopyPartialFileTask will copy a partial file to between two storager.
type CopyPartialFileTask struct {
	copyPartialFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopyPartialFileTask) Run() {
	t.run()
}

func (t *CopyPartialFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyPartialFile failed: {%w}", err))
}

func newCopyPartialFileTask(task navvy.Task) *CopyPartialFileTask {
	t := &CopyPartialFileTask{
		copyPartialFileTaskRequirement: task.(copyPartialFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopyPartialFileTask will create a CopyPartialFileTask and fetch inherited data from parent task.
func NewCopyPartialFileTask(task navvy.Task) navvy.Task {
	return newCopyPartialFileTask(task)
}

// copyPartialStreamTaskRequirement is the requirement for execute CopyPartialStreamTask.
type copyPartialStreamTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.BytesPoolGetter
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.PartSizeGetter
	types.SegmentIDGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyPartialStreamTask is the mock task for CopyPartialStreamTask.
type mockCopyPartialStreamTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BytesPool
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.PartSize
	types.SegmentID
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyPartialStreamTask) Run() {
	panic("mockCopyPartialStreamTask should not be run.")
}

// CopyPartialStreamTask will copy a partial stream between two storager.
type CopyPartialStreamTask struct {
	copyPartialStreamTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Content
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopyPartialStreamTask) Run() {
	t.run()
}

func (t *CopyPartialStreamTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyPartialStream failed: {%w}", err))
}

func newCopyPartialStreamTask(task navvy.Task) *CopyPartialStreamTask {
	t := &CopyPartialStreamTask{
		copyPartialStreamTaskRequirement: task.(copyPartialStreamTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopyPartialStreamTask will create a CopyPartialStreamTask and fetch inherited data from parent task.
func NewCopyPartialStreamTask(task navvy.Task) navvy.Task {
	return newCopyPartialStreamTask(task)
}

// copySmallFileTaskRequirement is the requirement for execute CopySmallFileTask.
type copySmallFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockCopySmallFileTask is the mock task for CopySmallFileTask.
type mockCopySmallFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage
	types.TotalSize

	// Mutable value
}

func (t *mockCopySmallFileTask) Run() {
	panic("mockCopySmallFileTask should not be run.")
}

// CopySmallFileTask will copy a small file between two storager.
type CopySmallFileTask struct {
	copySmallFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
	types.Offset
	types.Size
}

// Run implement navvy.Task
func (t *CopySmallFileTask) Run() {
	t.run()
}

func (t *CopySmallFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopySmallFile failed: {%w}", err))
}

func newCopySmallFileTask(task navvy.Task) *CopySmallFileTask {
	t := &CopySmallFileTask{
		copySmallFileTaskRequirement: task.(copySmallFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopySmallFileTask will create a CopySmallFileTask and fetch inherited data from parent task.
func NewCopySmallFileTask(task navvy.Task) navvy.Task {
	return newCopySmallFileTask(task)
}

// copyStreamTaskRequirement is the requirement for execute CopyStreamTask.
type copyStreamTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockCopyStreamTask is the mock task for CopyStreamTask.
type mockCopyStreamTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockCopyStreamTask) Run() {
	panic("mockCopyStreamTask should not be run.")
}

// CopyStreamTask will copy a stream between two storager.
type CopyStreamTask struct {
	copyStreamTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BytesPool
	types.CurrentOffset
	types.PartSize
	types.ScheduleFunc
	types.SegmentID
	types.TotalSize
}

// Run implement navvy.Task
func (t *CopyStreamTask) Run() {
	t.run()
}

func (t *CopyStreamTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CopyStream failed: {%w}", err))
}

func newCopyStreamTask(task navvy.Task) *CopyStreamTask {
	t := &CopyStreamTask{
		copyStreamTaskRequirement: task.(copyStreamTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCopyStreamTask will create a CopyStreamTask and fetch inherited data from parent task.
func NewCopyStreamTask(task navvy.Task) navvy.Task {
	return newCopyStreamTask(task)
}

// createStorageTaskRequirement is the requirement for execute CreateStorageTask.
type createStorageTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.StorageNameGetter
	types.ZoneGetter

	// Mutable value
}

// mockCreateStorageTask is the mock task for CreateStorageTask.
type mockCreateStorageTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.StorageName
	types.Zone

	// Mutable value
}

func (t *mockCreateStorageTask) Run() {
	panic("mockCreateStorageTask should not be run.")
}

// CreateStorageTask will create a storage.
type CreateStorageTask struct {
	createStorageTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *CreateStorageTask) Run() {
	t.run()
}

func (t *CreateStorageTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task CreateStorage failed: {%w}", err))
}

func newCreateStorageTask(task navvy.Task) *CreateStorageTask {
	t := &CreateStorageTask{
		createStorageTaskRequirement: task.(createStorageTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewCreateStorageTask will create a CreateStorageTask and fetch inherited data from parent task.
func NewCreateStorageTask(task navvy.Task) navvy.Task {
	return newCreateStorageTask(task)
}

// deleteDirTaskRequirement is the requirement for execute DeleteDirTask.
type deleteDirTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockDeleteDirTask is the mock task for DeleteDirTask.
type mockDeleteDirTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockDeleteDirTask) Run() {
	panic("mockDeleteDirTask should not be run.")
}

// DeleteDirTask will will delete a dir recursively.
type DeleteDirTask struct {
	deleteDirTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.Recursive
	types.ScheduleFunc
}

// Run implement navvy.Task
func (t *DeleteDirTask) Run() {
	t.run()
}

func (t *DeleteDirTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteDir failed: {%w}", err))
}

func newDeleteDirTask(task navvy.Task) *DeleteDirTask {
	t := &DeleteDirTask{
		deleteDirTaskRequirement: task.(deleteDirTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewDeleteDirTask will create a DeleteDirTask and fetch inherited data from parent task.
func NewDeleteDirTask(task navvy.Task) navvy.Task {
	return newDeleteDirTask(task)
}

// deleteFileTaskRequirement is the requirement for execute DeleteFileTask.
type deleteFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockDeleteFileTask is the mock task for DeleteFileTask.
type mockDeleteFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockDeleteFileTask) Run() {
	panic("mockDeleteFileTask should not be run.")
}

// DeleteFileTask will will delete a file from storage.
type DeleteFileTask struct {
	deleteFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *DeleteFileTask) Run() {
	t.run()
}

func (t *DeleteFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteFile failed: {%w}", err))
}

func newDeleteFileTask(task navvy.Task) *DeleteFileTask {
	t := &DeleteFileTask{
		deleteFileTaskRequirement: task.(deleteFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewDeleteFileTask will create a DeleteFileTask and fetch inherited data from parent task.
func NewDeleteFileTask(task navvy.Task) navvy.Task {
	return newDeleteFileTask(task)
}

// deleteStorageTaskRequirement is the requirement for execute DeleteStorageTask.
type deleteStorageTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.StorageNameGetter

	// Mutable value
}

// mockDeleteStorageTask is the mock task for DeleteStorageTask.
type mockDeleteStorageTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.StorageName

	// Mutable value
}

func (t *mockDeleteStorageTask) Run() {
	panic("mockDeleteStorageTask should not be run.")
}

// DeleteStorageTask will delete a storage.
type DeleteStorageTask struct {
	deleteStorageTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *DeleteStorageTask) Run() {
	t.run()
}

func (t *DeleteStorageTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteStorage failed: {%w}", err))
}

func newDeleteStorageTask(task navvy.Task) *DeleteStorageTask {
	t := &DeleteStorageTask{
		deleteStorageTaskRequirement: task.(deleteStorageTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewDeleteStorageTask will create a DeleteStorageTask and fetch inherited data from parent task.
func NewDeleteStorageTask(task navvy.Task) navvy.Task {
	return newDeleteStorageTask(task)
}

// deleteStorageForceTaskRequirement is the requirement for execute DeleteStorageForceTask.
type deleteStorageForceTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.StorageNameGetter

	// Mutable value
}

// mockDeleteStorageForceTask is the mock task for DeleteStorageForceTask.
type mockDeleteStorageForceTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.StorageName

	// Mutable value
}

func (t *mockDeleteStorageForceTask) Run() {
	panic("mockDeleteStorageForceTask should not be run.")
}

// DeleteStorageForceTask will remove a bucket force.
type DeleteStorageForceTask struct {
	deleteStorageForceTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
}

// Run implement navvy.Task
func (t *DeleteStorageForceTask) Run() {
	t.run()
}

func (t *DeleteStorageForceTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DeleteStorageForce failed: {%w}", err))
}

func newDeleteStorageForceTask(task navvy.Task) *DeleteStorageForceTask {
	t := &DeleteStorageForceTask{
		deleteStorageForceTaskRequirement: task.(deleteStorageForceTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewDeleteStorageForceTask will create a DeleteStorageForceTask and fetch inherited data from parent task.
func NewDeleteStorageForceTask(task navvy.Task) navvy.Task {
	return newDeleteStorageForceTask(task)
}

// fileCopyTaskRequirement is the requirement for execute FileCopyTask.
type fileCopyTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockFileCopyTask is the mock task for FileCopyTask.
type mockFileCopyTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockFileCopyTask) Run() {
	panic("mockFileCopyTask should not be run.")
}

// FileCopyTask will execute a file copy operation between towo storager.
type FileCopyTask struct {
	fileCopyTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *FileCopyTask) Run() {
	t.run()
}

func (t *FileCopyTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task FileCopy failed: {%w}", err))
}

func newFileCopyTask(task navvy.Task) *FileCopyTask {
	t := &FileCopyTask{
		fileCopyTaskRequirement: task.(fileCopyTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewFileCopyTask will create a FileCopyTask and fetch inherited data from parent task.
func NewFileCopyTask(task navvy.Task) navvy.Task {
	return newFileCopyTask(task)
}

// fileMD5SumTaskRequirement is the requirement for execute FileMD5SumTask.
type fileMD5SumTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.OffsetGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
	types.MD5SumSetter
}

// mockFileMD5SumTask is the mock task for FileMD5SumTask.
type mockFileMD5SumTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Offset
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
	types.MD5Sum
}

func (t *mockFileMD5SumTask) Run() {
	panic("mockFileMD5SumTask should not be run.")
}

// FileMD5SumTask will get file's md5 sum.
type FileMD5SumTask struct {
	fileMD5SumTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *FileMD5SumTask) Run() {
	t.run()
}

func (t *FileMD5SumTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task FileMD5Sum failed: {%w}", err))
}

func newFileMD5SumTask(task navvy.Task) *FileMD5SumTask {
	t := &FileMD5SumTask{
		fileMD5SumTaskRequirement: task.(fileMD5SumTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewFileMD5SumTask will create a FileMD5SumTask and fetch inherited data from parent task.
func NewFileMD5SumTask(task navvy.Task) navvy.Task {
	return newFileMD5SumTask(task)
}

// iterateFileTaskRequirement is the requirement for execute IterateFileTask.
type iterateFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.RecursiveGetter
	types.ScheduleFuncGetter
	types.StorageGetter

	// Mutable value
}

// mockIterateFileTask is the mock task for IterateFileTask.
type mockIterateFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Recursive
	types.ScheduleFunc
	types.Storage

	// Mutable value
}

func (t *mockIterateFileTask) Run() {
	panic("mockIterateFileTask should not be run.")
}

// IterateFileTask will iterate file and execute operations on it.
type IterateFileTask struct {
	iterateFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.ObjectChannel
	types.Path
}

// Run implement navvy.Task
func (t *IterateFileTask) Run() {
	t.run()
}

func (t *IterateFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task IterateFile failed: {%w}", err))
}

func newIterateFileTask(task navvy.Task) *IterateFileTask {
	t := &IterateFileTask{
		iterateFileTaskRequirement: task.(iterateFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewIterateFileTask will create a IterateFileTask and fetch inherited data from parent task.
func NewIterateFileTask(task navvy.Task) navvy.Task {
	return newIterateFileTask(task)
}

// listFileTaskRequirement is the requirement for execute ListFileTask.
type listFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ObjectChannelGetter
	types.PathGetter
	types.RecursiveGetter
	types.StorageGetter

	// Mutable value
}

// mockListFileTask is the mock task for ListFileTask.
type mockListFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.ObjectChannel
	types.Path
	types.Recursive
	types.Storage

	// Mutable value
}

func (t *mockListFileTask) Run() {
	panic("mockListFileTask should not be run.")
}

// ListFileTask will list files.
type ListFileTask struct {
	listFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *ListFileTask) Run() {
	t.run()
}

func (t *ListFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ListFile failed: {%w}", err))
}

func newListFileTask(task navvy.Task) *ListFileTask {
	t := &ListFileTask{
		listFileTaskRequirement: task.(listFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewListFileTask will create a ListFileTask and fetch inherited data from parent task.
func NewListFileTask(task navvy.Task) navvy.Task {
	return newListFileTask(task)
}

// listStorageTaskRequirement is the requirement for execute ListStorageTask.
type listStorageTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ServiceGetter
	types.ZoneGetter

	// Mutable value
}

// mockListStorageTask is the mock task for ListStorageTask.
type mockListStorageTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Service
	types.Zone

	// Mutable value
}

func (t *mockListStorageTask) Run() {
	panic("mockListStorageTask should not be run.")
}

// ListStorageTask will send get request to get bucket list.
type ListStorageTask struct {
	listStorageTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.BucketList
}

// Run implement navvy.Task
func (t *ListStorageTask) Run() {
	t.run()
}

func (t *ListStorageTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ListStorage failed: {%w}", err))
}

func newListStorageTask(task navvy.Task) *ListStorageTask {
	t := &ListStorageTask{
		listStorageTaskRequirement: task.(listStorageTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewListStorageTask will create a ListStorageTask and fetch inherited data from parent task.
func NewListStorageTask(task navvy.Task) navvy.Task {
	return newListStorageTask(task)
}

// reachFileTaskRequirement is the requirement for execute ReachFileTask.
type reachFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ExpireGetter
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockReachFileTask is the mock task for ReachFileTask.
type mockReachFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Expire
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockReachFileTask) Run() {
	panic("mockReachFileTask should not be run.")
}

// ReachFileTask will will reach a remote object and return the signed url.
type ReachFileTask struct {
	reachFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.URL
}

// Run implement navvy.Task
func (t *ReachFileTask) Run() {
	t.run()
}

func (t *ReachFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ReachFile failed: {%w}", err))
}

func newReachFileTask(task navvy.Task) *ReachFileTask {
	t := &ReachFileTask{
		reachFileTaskRequirement: task.(reachFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewReachFileTask will create a ReachFileTask and fetch inherited data from parent task.
func NewReachFileTask(task navvy.Task) navvy.Task {
	return newReachFileTask(task)
}

// segmentAbortAllTaskRequirement is the requirement for execute SegmentAbortAllTask.
type segmentAbortAllTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.StorageGetter
	types.StorageNameGetter

	// Mutable value
}

// mockSegmentAbortAllTask is the mock task for SegmentAbortAllTask.
type mockSegmentAbortAllTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Storage
	types.StorageName

	// Mutable value
}

func (t *mockSegmentAbortAllTask) Run() {
	panic("mockSegmentAbortAllTask should not be run.")
}

// SegmentAbortAllTask will abort all multipart uploads in a bucket.
type SegmentAbortAllTask struct {
	segmentAbortAllTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentAbortAllTask) Run() {
	t.run()
}

func (t *SegmentAbortAllTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task SegmentAbortAll failed: {%w}", err))
}

func newSegmentAbortAllTask(task navvy.Task) *SegmentAbortAllTask {
	t := &SegmentAbortAllTask{
		segmentAbortAllTaskRequirement: task.(segmentAbortAllTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewSegmentAbortAllTask will create a SegmentAbortAllTask and fetch inherited data from parent task.
func NewSegmentAbortAllTask(task navvy.Task) navvy.Task {
	return newSegmentAbortAllTask(task)
}

// segmentCompleteTaskRequirement is the requirement for execute SegmentCompleteTask.
type segmentCompleteTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.SegmentIDGetter
	types.StorageGetter

	// Mutable value
}

// mockSegmentCompleteTask is the mock task for SegmentCompleteTask.
type mockSegmentCompleteTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.SegmentID
	types.Storage

	// Mutable value
}

func (t *mockSegmentCompleteTask) Run() {
	panic("mockSegmentCompleteTask should not be run.")
}

// SegmentCompleteTask will complete a segment.
type SegmentCompleteTask struct {
	segmentCompleteTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentCompleteTask) Run() {
	t.run()
}

func (t *SegmentCompleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task SegmentComplete failed: {%w}", err))
}

func newSegmentCompleteTask(task navvy.Task) *SegmentCompleteTask {
	t := &SegmentCompleteTask{
		segmentCompleteTaskRequirement: task.(segmentCompleteTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewSegmentCompleteTask will create a SegmentCompleteTask and fetch inherited data from parent task.
func NewSegmentCompleteTask(task navvy.Task) navvy.Task {
	return newSegmentCompleteTask(task)
}

// segmentFileCopyTaskRequirement is the requirement for execute SegmentFileCopyTask.
type segmentFileCopyTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockSegmentFileCopyTask is the mock task for SegmentFileCopyTask.
type mockSegmentFileCopyTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockSegmentFileCopyTask) Run() {
	panic("mockSegmentFileCopyTask should not be run.")
}

// SegmentFileCopyTask will copy a segment file.
type SegmentFileCopyTask struct {
	segmentFileCopyTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentFileCopyTask) Run() {
	t.run()
}

func (t *SegmentFileCopyTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task SegmentFileCopy failed: {%w}", err))
}

func newSegmentFileCopyTask(task navvy.Task) *SegmentFileCopyTask {
	t := &SegmentFileCopyTask{
		segmentFileCopyTaskRequirement: task.(segmentFileCopyTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewSegmentFileCopyTask will create a SegmentFileCopyTask and fetch inherited data from parent task.
func NewSegmentFileCopyTask(task navvy.Task) navvy.Task {
	return newSegmentFileCopyTask(task)
}

// segmentInitTaskRequirement is the requirement for execute SegmentInitTask.
type segmentInitTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.ScheduleFuncGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockSegmentInitTask is the mock task for SegmentInitTask.
type mockSegmentInitTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.ScheduleFunc
	types.TotalSize

	// Mutable value
}

func (t *mockSegmentInitTask) Run() {
	panic("mockSegmentInitTask should not be run.")
}

// SegmentInitTask will init a segment upload.
type SegmentInitTask struct {
	segmentInitTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.SegmentID
}

// Run implement navvy.Task
func (t *SegmentInitTask) Run() {
	t.run()
}

func (t *SegmentInitTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task SegmentInit failed: {%w}", err))
}

func newSegmentInitTask(task navvy.Task) *SegmentInitTask {
	t := &SegmentInitTask{
		segmentInitTaskRequirement: task.(segmentInitTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewSegmentInitTask will create a SegmentInitTask and fetch inherited data from parent task.
func NewSegmentInitTask(task navvy.Task) navvy.Task {
	return newSegmentInitTask(task)
}

// segmentStreamCopyTaskRequirement is the requirement for execute SegmentStreamCopyTask.
type segmentStreamCopyTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter

	// Mutable value
}

// mockSegmentStreamCopyTask is the mock task for SegmentStreamCopyTask.
type mockSegmentStreamCopyTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size

	// Mutable value
}

func (t *mockSegmentStreamCopyTask) Run() {
	panic("mockSegmentStreamCopyTask should not be run.")
}

// SegmentStreamCopyTask will copy a segment stream.
type SegmentStreamCopyTask struct {
	segmentStreamCopyTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *SegmentStreamCopyTask) Run() {
	t.run()
}

func (t *SegmentStreamCopyTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task SegmentStreamCopy failed: {%w}", err))
}

func newSegmentStreamCopyTask(task navvy.Task) *SegmentStreamCopyTask {
	t := &SegmentStreamCopyTask{
		segmentStreamCopyTaskRequirement: task.(segmentStreamCopyTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewSegmentStreamCopyTask will create a SegmentStreamCopyTask and fetch inherited data from parent task.
func NewSegmentStreamCopyTask(task navvy.Task) navvy.Task {
	return newSegmentStreamCopyTask(task)
}

// statFileTaskRequirement is the requirement for execute StatFileTask.
type statFileTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.PathGetter
	types.StorageGetter

	// Mutable value
}

// mockStatFileTask is the mock task for StatFileTask.
type mockStatFileTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Path
	types.Storage

	// Mutable value
}

func (t *mockStatFileTask) Run() {
	panic("mockStatFileTask should not be run.")
}

// StatFileTask will stat a remote object by request headObject.
type StatFileTask struct {
	statFileTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Object
}

// Run implement navvy.Task
func (t *StatFileTask) Run() {
	t.run()
}

func (t *StatFileTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task StatFile failed: {%w}", err))
}

func newStatFileTask(task navvy.Task) *StatFileTask {
	t := &StatFileTask{
		statFileTaskRequirement: task.(statFileTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewStatFileTask will create a StatFileTask and fetch inherited data from parent task.
func NewStatFileTask(task navvy.Task) navvy.Task {
	return newStatFileTask(task)
}

// streamMD5SumTaskRequirement is the requirement for execute StreamMD5SumTask.
type streamMD5SumTaskRequirement interface {
	navvy.Task

	// Predefined inherited value
	types.PoolGetter

	// Inherited value
	types.ContentGetter

	// Mutable value
}

// mockStreamMD5SumTask is the mock task for StreamMD5SumTask.
type mockStreamMD5SumTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content

	// Mutable value
}

func (t *mockStreamMD5SumTask) Run() {
	panic("mockStreamMD5SumTask should not be run.")
}

// StreamMD5SumTask will get stream's md5 sum.
type StreamMD5SumTask struct {
	streamMD5SumTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.MD5Sum
}

// Run implement navvy.Task
func (t *StreamMD5SumTask) Run() {
	t.run()
}

func (t *StreamMD5SumTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task StreamMD5Sum failed: {%w}", err))
}

func newStreamMD5SumTask(task navvy.Task) *StreamMD5SumTask {
	t := &StreamMD5SumTask{
		streamMD5SumTaskRequirement: task.(streamMD5SumTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// NewStreamMD5SumTask will create a StreamMD5SumTask and fetch inherited data from parent task.
func NewStreamMD5SumTask(task navvy.Task) navvy.Task {
	return newStreamMD5SumTask(task)
}
