// Code generated by go generate; DO NOT EDIT.
package task

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/fault"
	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestCopyFileTask_TriggerFault(t *testing.T) {
	task := &CopyFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopyLargeFileTask_TriggerFault(t *testing.T) {
	task := &CopyLargeFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopyPartialFileTask_TriggerFault(t *testing.T) {
	task := &CopyPartialFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopyPartialStreamTask_TriggerFault(t *testing.T) {
	task := &CopyPartialStreamTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopySingleFileTask_TriggerFault(t *testing.T) {
	task := &CopySingleFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopySmallFileTask_TriggerFault(t *testing.T) {
	task := &CopySmallFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCopyStreamTask_TriggerFault(t *testing.T) {
	task := &CopyStreamTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestCreateStorageTask_TriggerFault(t *testing.T) {
	task := &CreateStorageTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestDeleteDirTask_TriggerFault(t *testing.T) {
	task := &DeleteDirTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestDeleteFileTask_TriggerFault(t *testing.T) {
	task := &DeleteFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestDeleteSegmentTask_TriggerFault(t *testing.T) {
	task := &DeleteSegmentTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestDeleteSegmentDirTask_TriggerFault(t *testing.T) {
	task := &DeleteSegmentDirTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestDeleteStorageTask_TriggerFault(t *testing.T) {
	task := &DeleteStorageTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestIterateFileTask_TriggerFault(t *testing.T) {
	task := &IterateFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestIterateSegmentTask_TriggerFault(t *testing.T) {
	task := &IterateSegmentTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestListFileTask_TriggerFault(t *testing.T) {
	task := &ListFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestListSegmentTask_TriggerFault(t *testing.T) {
	task := &ListSegmentTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestListStorageTask_TriggerFault(t *testing.T) {
	task := &ListStorageTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMD5SumFileTask_TriggerFault(t *testing.T) {
	task := &MD5SumFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMD5SumStreamTask_TriggerFault(t *testing.T) {
	task := &MD5SumStreamTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestReachFileTask_TriggerFault(t *testing.T) {
	task := &ReachFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestSegmentAbortAllTask_TriggerFault(t *testing.T) {
	task := &SegmentAbortAllTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestSegmentCompleteTask_TriggerFault(t *testing.T) {
	task := &SegmentCompleteTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestSegmentFileCopyTask_TriggerFault(t *testing.T) {
	task := &SegmentFileCopyTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestSegmentInitTask_TriggerFault(t *testing.T) {
	task := &SegmentInitTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestSegmentStreamCopyTask_TriggerFault(t *testing.T) {
	task := &SegmentStreamCopyTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestStatFileTask_TriggerFault(t *testing.T) {
	task := &StatFileTask{}
	task.SetFault(fault.New())
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}
