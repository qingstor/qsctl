// Code generated by go generate; DO NOT EDIT.
package task

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/fault"
	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestCopyFileTask_TriggerFault(t *testing.T) {
	m := &mockCopyFileTask{}
	m.SetFault(fault.New())
	task := &CopyFileTask{copyFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyFileTask_Run(t *testing.T) {
	task := &mockCopyFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyLargeFileTask_TriggerFault(t *testing.T) {
	m := &mockCopyLargeFileTask{}
	m.SetFault(fault.New())
	task := &CopyLargeFileTask{copyLargeFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyLargeFileTask_Run(t *testing.T) {
	task := &mockCopyLargeFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyPartialFileTask_TriggerFault(t *testing.T) {
	m := &mockCopyPartialFileTask{}
	m.SetFault(fault.New())
	task := &CopyPartialFileTask{copyPartialFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyPartialFileTask_Run(t *testing.T) {
	task := &mockCopyPartialFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyPartialStreamTask_TriggerFault(t *testing.T) {
	m := &mockCopyPartialStreamTask{}
	m.SetFault(fault.New())
	task := &CopyPartialStreamTask{copyPartialStreamTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyPartialStreamTask_Run(t *testing.T) {
	task := &mockCopyPartialStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopySingleFileTask_TriggerFault(t *testing.T) {
	m := &mockCopySingleFileTask{}
	m.SetFault(fault.New())
	task := &CopySingleFileTask{copySingleFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopySingleFileTask_Run(t *testing.T) {
	task := &mockCopySingleFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopySmallFileTask_TriggerFault(t *testing.T) {
	m := &mockCopySmallFileTask{}
	m.SetFault(fault.New())
	task := &CopySmallFileTask{copySmallFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopySmallFileTask_Run(t *testing.T) {
	task := &mockCopySmallFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyStreamTask_TriggerFault(t *testing.T) {
	m := &mockCopyStreamTask{}
	m.SetFault(fault.New())
	task := &CopyStreamTask{copyStreamTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyStreamTask_Run(t *testing.T) {
	task := &mockCopyStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCreateStorageTask_TriggerFault(t *testing.T) {
	m := &mockCreateStorageTask{}
	m.SetFault(fault.New())
	task := &CreateStorageTask{createStorageTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCreateStorageTask_Run(t *testing.T) {
	task := &mockCreateStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteDirTask_TriggerFault(t *testing.T) {
	m := &mockDeleteDirTask{}
	m.SetFault(fault.New())
	task := &DeleteDirTask{deleteDirTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteDirTask_Run(t *testing.T) {
	task := &mockDeleteDirTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteFileTask_TriggerFault(t *testing.T) {
	m := &mockDeleteFileTask{}
	m.SetFault(fault.New())
	task := &DeleteFileTask{deleteFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteFileTask_Run(t *testing.T) {
	task := &mockDeleteFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteSegmentTask_TriggerFault(t *testing.T) {
	m := &mockDeleteSegmentTask{}
	m.SetFault(fault.New())
	task := &DeleteSegmentTask{deleteSegmentTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteSegmentTask_Run(t *testing.T) {
	task := &mockDeleteSegmentTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteStorageTask_TriggerFault(t *testing.T) {
	m := &mockDeleteStorageTask{}
	m.SetFault(fault.New())
	task := &DeleteStorageTask{deleteStorageTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteStorageTask_Run(t *testing.T) {
	task := &mockDeleteStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteStorageForceTask_TriggerFault(t *testing.T) {
	m := &mockDeleteStorageForceTask{}
	m.SetFault(fault.New())
	task := &DeleteStorageForceTask{deleteStorageForceTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteStorageForceTask_Run(t *testing.T) {
	task := &mockDeleteStorageForceTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestIterateFileTask_TriggerFault(t *testing.T) {
	m := &mockIterateFileTask{}
	m.SetFault(fault.New())
	task := &IterateFileTask{iterateFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockIterateFileTask_Run(t *testing.T) {
	task := &mockIterateFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestListFileTask_TriggerFault(t *testing.T) {
	m := &mockListFileTask{}
	m.SetFault(fault.New())
	task := &ListFileTask{listFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockListFileTask_Run(t *testing.T) {
	task := &mockListFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestListStorageTask_TriggerFault(t *testing.T) {
	m := &mockListStorageTask{}
	m.SetFault(fault.New())
	task := &ListStorageTask{listStorageTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockListStorageTask_Run(t *testing.T) {
	task := &mockListStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestMD5SumFileTask_TriggerFault(t *testing.T) {
	m := &mockMD5SumFileTask{}
	m.SetFault(fault.New())
	task := &MD5SumFileTask{mD5SumFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockMD5SumFileTask_Run(t *testing.T) {
	task := &mockMD5SumFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestMD5SumStreamTask_TriggerFault(t *testing.T) {
	m := &mockMD5SumStreamTask{}
	m.SetFault(fault.New())
	task := &MD5SumStreamTask{mD5SumStreamTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockMD5SumStreamTask_Run(t *testing.T) {
	task := &mockMD5SumStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestReachFileTask_TriggerFault(t *testing.T) {
	m := &mockReachFileTask{}
	m.SetFault(fault.New())
	task := &ReachFileTask{reachFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockReachFileTask_Run(t *testing.T) {
	task := &mockReachFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentAbortAllTask_TriggerFault(t *testing.T) {
	m := &mockSegmentAbortAllTask{}
	m.SetFault(fault.New())
	task := &SegmentAbortAllTask{segmentAbortAllTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentAbortAllTask_Run(t *testing.T) {
	task := &mockSegmentAbortAllTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentCompleteTask_TriggerFault(t *testing.T) {
	m := &mockSegmentCompleteTask{}
	m.SetFault(fault.New())
	task := &SegmentCompleteTask{segmentCompleteTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentCompleteTask_Run(t *testing.T) {
	task := &mockSegmentCompleteTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentFileCopyTask_TriggerFault(t *testing.T) {
	m := &mockSegmentFileCopyTask{}
	m.SetFault(fault.New())
	task := &SegmentFileCopyTask{segmentFileCopyTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentFileCopyTask_Run(t *testing.T) {
	task := &mockSegmentFileCopyTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentInitTask_TriggerFault(t *testing.T) {
	m := &mockSegmentInitTask{}
	m.SetFault(fault.New())
	task := &SegmentInitTask{segmentInitTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentInitTask_Run(t *testing.T) {
	task := &mockSegmentInitTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentStreamCopyTask_TriggerFault(t *testing.T) {
	m := &mockSegmentStreamCopyTask{}
	m.SetFault(fault.New())
	task := &SegmentStreamCopyTask{segmentStreamCopyTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentStreamCopyTask_Run(t *testing.T) {
	task := &mockSegmentStreamCopyTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestStatFileTask_TriggerFault(t *testing.T) {
	m := &mockStatFileTask{}
	m.SetFault(fault.New())
	task := &StatFileTask{statFileTaskRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockStatFileTask_Run(t *testing.T) {
	task := &mockStatFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
