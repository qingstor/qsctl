// Code generated by go generate; DO NOT EDIT.
package task

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/fault"
	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestCopyFileTask_TriggerFault(t *testing.T) {
	m := &types.MockCopyFileTask{}
	m.SetFault(fault.New())
	task := &CopyFileTask{CopyFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyFileTask_Run(t *testing.T) {
	task := &types.MockCopyFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyLargeFileTask_TriggerFault(t *testing.T) {
	m := &types.MockCopyLargeFileTask{}
	m.SetFault(fault.New())
	task := &CopyLargeFileTask{CopyLargeFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyLargeFileTask_Run(t *testing.T) {
	task := &types.MockCopyLargeFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyPartialFileTask_TriggerFault(t *testing.T) {
	m := &types.MockCopyPartialFileTask{}
	m.SetFault(fault.New())
	task := &CopyPartialFileTask{CopyPartialFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyPartialFileTask_Run(t *testing.T) {
	task := &types.MockCopyPartialFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyPartialStreamTask_TriggerFault(t *testing.T) {
	m := &types.MockCopyPartialStreamTask{}
	m.SetFault(fault.New())
	task := &CopyPartialStreamTask{CopyPartialStreamRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyPartialStreamTask_Run(t *testing.T) {
	task := &types.MockCopyPartialStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopySingleFileTask_TriggerFault(t *testing.T) {
	m := &types.MockCopySingleFileTask{}
	m.SetFault(fault.New())
	task := &CopySingleFileTask{CopySingleFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopySingleFileTask_Run(t *testing.T) {
	task := &types.MockCopySingleFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopySmallFileTask_TriggerFault(t *testing.T) {
	m := &types.MockCopySmallFileTask{}
	m.SetFault(fault.New())
	task := &CopySmallFileTask{CopySmallFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopySmallFileTask_Run(t *testing.T) {
	task := &types.MockCopySmallFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCopyStreamTask_TriggerFault(t *testing.T) {
	m := &types.MockCopyStreamTask{}
	m.SetFault(fault.New())
	task := &CopyStreamTask{CopyStreamRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCopyStreamTask_Run(t *testing.T) {
	task := &types.MockCopyStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestCreateStorageTask_TriggerFault(t *testing.T) {
	m := &types.MockCreateStorageTask{}
	m.SetFault(fault.New())
	task := &CreateStorageTask{CreateStorageRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockCreateStorageTask_Run(t *testing.T) {
	task := &types.MockCreateStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteDirTask_TriggerFault(t *testing.T) {
	m := &types.MockDeleteDirTask{}
	m.SetFault(fault.New())
	task := &DeleteDirTask{DeleteDirRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteDirTask_Run(t *testing.T) {
	task := &types.MockDeleteDirTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteFileTask_TriggerFault(t *testing.T) {
	m := &types.MockDeleteFileTask{}
	m.SetFault(fault.New())
	task := &DeleteFileTask{DeleteFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteFileTask_Run(t *testing.T) {
	task := &types.MockDeleteFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteSegmentTask_TriggerFault(t *testing.T) {
	m := &types.MockDeleteSegmentTask{}
	m.SetFault(fault.New())
	task := &DeleteSegmentTask{DeleteSegmentRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteSegmentTask_Run(t *testing.T) {
	task := &types.MockDeleteSegmentTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteStorageTask_TriggerFault(t *testing.T) {
	m := &types.MockDeleteStorageTask{}
	m.SetFault(fault.New())
	task := &DeleteStorageTask{DeleteStorageRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteStorageTask_Run(t *testing.T) {
	task := &types.MockDeleteStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestDeleteStorageForceTask_TriggerFault(t *testing.T) {
	m := &types.MockDeleteStorageForceTask{}
	m.SetFault(fault.New())
	task := &DeleteStorageForceTask{DeleteStorageForceRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockDeleteStorageForceTask_Run(t *testing.T) {
	task := &types.MockDeleteStorageForceTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestIterateFileTask_TriggerFault(t *testing.T) {
	m := &types.MockIterateFileTask{}
	m.SetFault(fault.New())
	task := &IterateFileTask{IterateFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockIterateFileTask_Run(t *testing.T) {
	task := &types.MockIterateFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestListFileTask_TriggerFault(t *testing.T) {
	m := &types.MockListFileTask{}
	m.SetFault(fault.New())
	task := &ListFileTask{ListFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockListFileTask_Run(t *testing.T) {
	task := &types.MockListFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestListStorageTask_TriggerFault(t *testing.T) {
	m := &types.MockListStorageTask{}
	m.SetFault(fault.New())
	task := &ListStorageTask{ListStorageRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockListStorageTask_Run(t *testing.T) {
	task := &types.MockListStorageTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestMD5SumFileTask_TriggerFault(t *testing.T) {
	m := &types.MockMD5SumFileTask{}
	m.SetFault(fault.New())
	task := &MD5SumFileTask{MD5SumFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockMD5SumFileTask_Run(t *testing.T) {
	task := &types.MockMD5SumFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestMD5SumStreamTask_TriggerFault(t *testing.T) {
	m := &types.MockMD5SumStreamTask{}
	m.SetFault(fault.New())
	task := &MD5SumStreamTask{MD5SumStreamRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockMD5SumStreamTask_Run(t *testing.T) {
	task := &types.MockMD5SumStreamTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestReachFileTask_TriggerFault(t *testing.T) {
	m := &types.MockReachFileTask{}
	m.SetFault(fault.New())
	task := &ReachFileTask{ReachFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockReachFileTask_Run(t *testing.T) {
	task := &types.MockReachFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentAbortAllTask_TriggerFault(t *testing.T) {
	m := &types.MockSegmentAbortAllTask{}
	m.SetFault(fault.New())
	task := &SegmentAbortAllTask{SegmentAbortAllRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentAbortAllTask_Run(t *testing.T) {
	task := &types.MockSegmentAbortAllTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentCompleteTask_TriggerFault(t *testing.T) {
	m := &types.MockSegmentCompleteTask{}
	m.SetFault(fault.New())
	task := &SegmentCompleteTask{SegmentCompleteRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentCompleteTask_Run(t *testing.T) {
	task := &types.MockSegmentCompleteTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentFileCopyTask_TriggerFault(t *testing.T) {
	m := &types.MockSegmentFileCopyTask{}
	m.SetFault(fault.New())
	task := &SegmentFileCopyTask{SegmentFileCopyRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentFileCopyTask_Run(t *testing.T) {
	task := &types.MockSegmentFileCopyTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentInitTask_TriggerFault(t *testing.T) {
	m := &types.MockSegmentInitTask{}
	m.SetFault(fault.New())
	task := &SegmentInitTask{SegmentInitRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentInitTask_Run(t *testing.T) {
	task := &types.MockSegmentInitTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestSegmentStreamCopyTask_TriggerFault(t *testing.T) {
	m := &types.MockSegmentStreamCopyTask{}
	m.SetFault(fault.New())
	task := &SegmentStreamCopyTask{SegmentStreamCopyRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockSegmentStreamCopyTask_Run(t *testing.T) {
	task := &types.MockSegmentStreamCopyTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestStatFileTask_TriggerFault(t *testing.T) {
	m := &types.MockStatFileTask{}
	m.SetFault(fault.New())
	task := &StatFileTask{StatFileRequirement: m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.GetFault().HasError())
}

func TestMockStatFileTask_Run(t *testing.T) {
	task := &types.MockStatFileTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
