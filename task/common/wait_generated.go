// Code generated by go generate; DO NOT EDIT.
package common

import (
	"github.com/Xuanwo/navvy"

	"github.com/yunify/qsctl/v2/task/types"
	"github.com/yunify/qsctl/v2/task/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask

// WaitTaskRequirement is the requirement for execute WaitTask.
type WaitTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.WaitGroupGetter
}

// WaitTask will wait until parent task finished.
type WaitTask struct {
	WaitTaskRequirement
}

// mockWaitTask is the mock task for WaitTask.
type mockWaitTask struct {
	types.Todo
	types.Pool
	types.WaitGroup
}

func (t *mockWaitTask) Run() {
	panic("mockWaitTask should not be run.")
}

// NewWaitTask will create a new WaitTask.
func NewWaitTask(task types.Todoist) navvy.Task {
	return &WaitTask{task.(WaitTaskRequirement)}
}
