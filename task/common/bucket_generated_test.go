// Code generated by go generate; DO NOT EDIT.
package common

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestNewBucketCreateTask(t *testing.T) {
	m := &mockBucketCreateTask{}
	task := NewBucketCreateTask(m)
	assert.NotNil(t, task)
}

func TestBucketCreateTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			task := &BucketCreateTask{}
			task.SetPool(pool)

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.AddTODOs(func(todoist types.Todoist) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			})

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestBucketCreateTask_TriggerFault(t *testing.T) {
	m := &mockBucketCreateTask{}
	task := &BucketCreateTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.bucketCreateTaskRequirement.ValidateFault())
}

func TestMockBucketCreateTask_Run(t *testing.T) {
	task := &mockBucketCreateTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
func TestBucketCreateTask_Wait(t *testing.T) {
	pool := navvy.NewPool(10)
	task := &BucketCreateTask{}
	{
		assert.Panics(t, func() {
			task.Wait()
		})
	}
	{
		task.SetPool(pool)
		assert.NotPanics(t, func() {
			task.Wait()
		})
	}
}

func TestNewBucketDeleteTask(t *testing.T) {
	m := &mockBucketDeleteTask{}
	task := NewBucketDeleteTask(m)
	assert.NotNil(t, task)
}

func TestBucketDeleteTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			task := &BucketDeleteTask{}
			task.SetPool(pool)

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.AddTODOs(func(todoist types.Todoist) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			})

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestBucketDeleteTask_TriggerFault(t *testing.T) {
	m := &mockBucketDeleteTask{}
	task := &BucketDeleteTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.bucketDeleteTaskRequirement.ValidateFault())
}

func TestMockBucketDeleteTask_Run(t *testing.T) {
	task := &mockBucketDeleteTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
func TestBucketDeleteTask_Wait(t *testing.T) {
	pool := navvy.NewPool(10)
	task := &BucketDeleteTask{}
	{
		assert.Panics(t, func() {
			task.Wait()
		})
	}
	{
		task.SetPool(pool)
		assert.NotPanics(t, func() {
			task.Wait()
		})
	}
}

func TestNewBucketListTask(t *testing.T) {
	m := &mockBucketListTask{}
	task := NewBucketListTask(m)
	assert.NotNil(t, task)
}

func TestBucketListTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			task := &BucketListTask{}
			task.SetPool(pool)

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.AddTODOs(func(todoist types.Todoist) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			})

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestBucketListTask_TriggerFault(t *testing.T) {
	m := &mockBucketListTask{}
	task := &BucketListTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.bucketListTaskRequirement.ValidateFault())
}

func TestMockBucketListTask_Run(t *testing.T) {
	task := &mockBucketListTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
func TestBucketListTask_Wait(t *testing.T) {
	pool := navvy.NewPool(10)
	task := &BucketListTask{}
	{
		assert.Panics(t, func() {
			task.Wait()
		})
	}
	{
		task.SetPool(pool)
		assert.NotPanics(t, func() {
			task.Wait()
		})
	}
}

func TestNewRemoveBucketForceTask(t *testing.T) {
	m := &mockRemoveBucketForceTask{}
	task := NewRemoveBucketForceTask(m)
	assert.NotNil(t, task)
}

func TestRemoveBucketForceTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			m := &mockRemoveBucketForceTask{}
			m.SetPool(pool)
			task := &RemoveBucketForceTask{removeBucketForceTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.AddTODOs(func(todoist types.Todoist) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			})

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestRemoveBucketForceTask_TriggerFault(t *testing.T) {
	m := &mockRemoveBucketForceTask{}
	task := &RemoveBucketForceTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.removeBucketForceTaskRequirement.ValidateFault())
}

func TestMockRemoveBucketForceTask_Run(t *testing.T) {
	task := &mockRemoveBucketForceTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
