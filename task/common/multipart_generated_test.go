// Code generated by go generate; DO NOT EDIT.
package common

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask

func TestNewMultipartCompleteTask(t *testing.T) {
	m := &mockMultipartCompleteTask{}
	task := NewMultipartCompleteTask(m)
	assert.NotNil(t, task)
}

func TestMultipartCompleteTask_TriggerFault(t *testing.T) {
	m := &mockMultipartCompleteTask{}
	task := &MultipartCompleteTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartCompleteTaskRequirement.ValidateFault())
}

func TestMockMultipartCompleteTask_Run(t *testing.T) {
	task := &mockMultipartCompleteTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartFileUploadTask(t *testing.T) {
	m := &mockMultipartFileUploadTask{}
	task := NewMultipartFileUploadTask(m)
	assert.NotNil(t, task)
}

func TestMultipartFileUploadTask_TriggerFault(t *testing.T) {
	m := &mockMultipartFileUploadTask{}
	task := &MultipartFileUploadTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartFileUploadTaskRequirement.ValidateFault())
}

func TestMockMultipartFileUploadTask_Run(t *testing.T) {
	task := &mockMultipartFileUploadTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartInitTask(t *testing.T) {
	m := &mockMultipartInitTask{}
	task := NewMultipartInitTask(m)
	assert.NotNil(t, task)
}

func TestMultipartInitTask_TriggerFault(t *testing.T) {
	m := &mockMultipartInitTask{}
	task := &MultipartInitTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartInitTaskRequirement.ValidateFault())
}

func TestMockMultipartInitTask_Run(t *testing.T) {
	task := &mockMultipartInitTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartStreamUploadTask(t *testing.T) {
	m := &mockMultipartStreamUploadTask{}
	task := NewMultipartStreamUploadTask(m)
	assert.NotNil(t, task)
}

func TestMultipartStreamUploadTask_TriggerFault(t *testing.T) {
	m := &mockMultipartStreamUploadTask{}
	task := &MultipartStreamUploadTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartStreamUploadTaskRequirement.ValidateFault())
}

func TestMockMultipartStreamUploadTask_Run(t *testing.T) {
	task := &mockMultipartStreamUploadTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
