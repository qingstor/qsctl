// Code generated by go generate; DO NOT EDIT.
package common

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestNewAbortMultipartTask(t *testing.T) {
	m := &mockAbortMultipartTask{}
	task := NewAbortMultipartTask(m)
	assert.NotNil(t, task)
}

func TestAbortMultipartTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)

			m := &mockAbortMultipartTask{}
			m.SetPool(pool)
			task := &AbortMultipartTask{abortMultipartTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestAbortMultipartTask_TriggerFault(t *testing.T) {
	m := &mockAbortMultipartTask{}
	task := &AbortMultipartTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.abortMultipartTaskRequirement.ValidateFault())
}

func TestMockAbortMultipartTask_Run(t *testing.T) {
	task := &mockAbortMultipartTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartCompleteTask(t *testing.T) {
	m := &mockMultipartCompleteTask{}
	task := NewMultipartCompleteTask(m)
	assert.NotNil(t, task)
}

func TestMultipartCompleteTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)

			m := &mockMultipartCompleteTask{}
			m.SetPool(pool)
			task := &MultipartCompleteTask{multipartCompleteTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestMultipartCompleteTask_TriggerFault(t *testing.T) {
	m := &mockMultipartCompleteTask{}
	task := &MultipartCompleteTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartCompleteTaskRequirement.ValidateFault())
}

func TestMockMultipartCompleteTask_Run(t *testing.T) {
	task := &mockMultipartCompleteTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartFileUploadTask(t *testing.T) {
	m := &mockMultipartFileUploadTask{}
	task := NewMultipartFileUploadTask(m)
	assert.NotNil(t, task)
}

func TestMultipartFileUploadTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)

			m := &mockMultipartFileUploadTask{}
			m.SetPool(pool)
			task := &MultipartFileUploadTask{multipartFileUploadTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestMultipartFileUploadTask_TriggerFault(t *testing.T) {
	m := &mockMultipartFileUploadTask{}
	task := &MultipartFileUploadTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartFileUploadTaskRequirement.ValidateFault())
}

func TestMockMultipartFileUploadTask_Run(t *testing.T) {
	task := &mockMultipartFileUploadTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartInitTask(t *testing.T) {
	m := &mockMultipartInitTask{}
	task := NewMultipartInitTask(m)
	assert.NotNil(t, task)
}

func TestMultipartInitTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)

			m := &mockMultipartInitTask{}
			m.SetPool(pool)
			task := &MultipartInitTask{multipartInitTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestMultipartInitTask_TriggerFault(t *testing.T) {
	m := &mockMultipartInitTask{}
	task := &MultipartInitTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartInitTaskRequirement.ValidateFault())
}

func TestMockMultipartInitTask_Run(t *testing.T) {
	task := &mockMultipartInitTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}

func TestNewMultipartStreamUploadTask(t *testing.T) {
	m := &mockMultipartStreamUploadTask{}
	task := NewMultipartStreamUploadTask(m)
	assert.NotNil(t, task)
}

func TestMultipartStreamUploadTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)

			m := &mockMultipartStreamUploadTask{}
			m.SetPool(pool)
			task := &MultipartStreamUploadTask{multipartStreamUploadTaskRequirement: m}

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestMultipartStreamUploadTask_TriggerFault(t *testing.T) {
	m := &mockMultipartStreamUploadTask{}
	task := &MultipartStreamUploadTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.multipartStreamUploadTaskRequirement.ValidateFault())
}

func TestMockMultipartStreamUploadTask_Run(t *testing.T) {
	task := &mockMultipartStreamUploadTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
