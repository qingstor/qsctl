// Code generated by go generate; DO NOT EDIT.
package common

import (
	"errors"
	"testing"

	"github.com/Xuanwo/navvy"
	"github.com/stretchr/testify/assert"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool

func TestNewObjectListTask(t *testing.T) {
	m := &mockObjectListTask{}
	task := NewObjectListTask(m)
	assert.NotNil(t, task)
}

func TestObjectListTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			task := &ObjectListTask{}
			task.SetPool(pool)

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestObjectListTask_TriggerFault(t *testing.T) {
	m := &mockObjectListTask{}
	task := &ObjectListTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.objectListTaskRequirement.ValidateFault())
}

func TestMockObjectListTask_Run(t *testing.T) {
	task := &mockObjectListTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
func TestObjectListTask_Wait(t *testing.T) {
	pool := navvy.NewPool(10)
	task := &ObjectListTask{}
	{
		assert.Panics(t, func() {
			task.Wait()
		})
	}
	{
		task.SetPool(pool)
		assert.NotPanics(t, func() {
			task.Wait()
		})
	}
}

func TestNewObjectListAsyncTask(t *testing.T) {
	m := &mockObjectListAsyncTask{}
	task := NewObjectListAsyncTask(m)
	assert.NotNil(t, task)
}

func TestObjectListAsyncTask_GeneratedRun(t *testing.T) {
	cases := []struct {
		name     string
		hasFault bool
		hasCall  bool
		gotCall  bool
	}{
		{
			"has fault",
			true,
			false,
			false,
		},
		{
			"no fault",
			false,
			true,
			false,
		},
	}

	for _, v := range cases {
		t.Run(v.name, func(t *testing.T) {
			pool := navvy.NewPool(10)
			task := &ObjectListAsyncTask{}
			task.SetPool(pool)

			err := errors.New("test error")
			if v.hasFault {
				task.SetFault(err)
			}
			task.GetScheduler.Sync(func(todoist types.TaskFunc) navvy.Task {
				x := utils.NewCallbackTask(func() {
					v.gotCall = true
				})
				return x
			}, task)

			task.Run()
			pool.Wait()

			assert.Equal(t, v.hasCall, v.gotCall)
		})
	}
}

func TestObjectListAsyncTask_TriggerFault(t *testing.T) {
	m := &mockObjectListAsyncTask{}
	task := &ObjectListAsyncTask{m}
	err := errors.New("test error")
	task.TriggerFault(err)
	assert.True(t, task.objectListAsyncTaskRequirement.ValidateFault())
}

func TestMockObjectListAsyncTask_Run(t *testing.T) {
	task := &mockObjectListAsyncTask{}
	assert.Panics(t, func() {
		task.Run()
	})
}
func TestObjectListAsyncTask_Wait(t *testing.T) {
	pool := navvy.NewPool(10)
	task := &ObjectListAsyncTask{}
	{
		assert.Panics(t, func() {
			task.Wait()
		})
	}
	{
		task.SetPool(pool)
		assert.NotPanics(t, func() {
			task.Wait()
		})
	}
}
