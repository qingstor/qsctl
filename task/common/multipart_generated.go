// Code generated by go generate; DO NOT EDIT.
package common

import (
	"github.com/Xuanwo/navvy"

	"github.com/yunify/qsctl/v2/task/types"
	"github.com/yunify/qsctl/v2/task/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask

// MultipartCompleteTaskRequirement is the requirement for execute MultipartCompleteTask.
type MultipartCompleteTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.ObjectKeyGetter
	types.UploadIDGetter
	types.CurrentPartNumberGetter
	types.StorageGetter
}

// MultipartCompleteTask will upload a multipart via stream.
type MultipartCompleteTask struct {
	MultipartCompleteTaskRequirement
}

// NewMultipartCompleteTask will create a new MultipartCompleteTask.
func NewMultipartCompleteTask(task types.Todoist) navvy.Task {
	o, ok := task.(MultipartCompleteTaskRequirement)
	if !ok {
		panic("task is not fill MultipartCompleteRequirement")
	}

	return &MultipartCompleteTask{o}
}

// MultipartFileUploadTaskRequirement is the requirement for execute MultipartFileUploadTask.
type MultipartFileUploadTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.MD5SumGetter
	types.PathGetter
	types.ObjectKeyGetter
	types.OffsetGetter
	types.UploadIDGetter
	types.PartNumberGetter
	types.SizeGetter
	types.WaitGroupGetter
	types.StorageGetter
}

// MultipartFileUploadTask will upload a multipart via file.
type MultipartFileUploadTask struct {
	MultipartFileUploadTaskRequirement
}

// NewMultipartFileUploadTask will create a new MultipartFileUploadTask.
func NewMultipartFileUploadTask(task types.Todoist) navvy.Task {
	o, ok := task.(MultipartFileUploadTaskRequirement)
	if !ok {
		panic("task is not fill MultipartFileUploadRequirement")
	}

	return &MultipartFileUploadTask{o}
}

// MultipartInitTaskRequirement is the requirement for execute MultipartInitTask.
type MultipartInitTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.ObjectKeyGetter
	types.PathGetter
	types.UploadIDSetter
	types.WaitGroupSetter
	types.StorageGetter
	types.TaskConstructorGetter
	types.CurrentPartNumberGetter
	types.CurrentOffsetGetter
	types.PartSizeGetter
	types.SizeGetter
}

// MultipartInitTask will init a mulitpart upload.
type MultipartInitTask struct {
	MultipartInitTaskRequirement
}

// NewMultipartInitTask will create a new MultipartInitTask.
func NewMultipartInitTask(task types.Todoist) navvy.Task {
	o, ok := task.(MultipartInitTaskRequirement)
	if !ok {
		panic("task is not fill MultipartInitRequirement")
	}

	return &MultipartInitTask{o}
}

// MultipartStreamUploadTaskRequirement is the requirement for execute MultipartStreamUploadTask.
type MultipartStreamUploadTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.MD5SumGetter
	types.PathGetter
	types.ObjectKeyGetter
	types.UploadIDGetter
	types.PartNumberGetter
	types.SizeGetter
	types.WaitGroupGetter
	types.StorageGetter
	types.ContentGetter
}

// MultipartStreamUploadTask will upload a multipart via stream.
type MultipartStreamUploadTask struct {
	MultipartStreamUploadTaskRequirement
}

// NewMultipartStreamUploadTask will create a new MultipartStreamUploadTask.
func NewMultipartStreamUploadTask(task types.Todoist) navvy.Task {
	o, ok := task.(MultipartStreamUploadTaskRequirement)
	if !ok {
		panic("task is not fill MultipartStreamUploadRequirement")
	}

	return &MultipartStreamUploadTask{o}
}
