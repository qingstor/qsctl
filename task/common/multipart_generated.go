// Code generated by go generate; DO NOT EDIT.
package common

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// abortMultipartTaskRequirement is the requirement for execute AbortMultipartTask.
type abortMultipartTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.BucketNameGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockAbortMultipartTask is the mock task for AbortMultipartTask.
type mockAbortMultipartTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.BucketName
	types.DestinationStorage

	// Mutable value
}

func (t *mockAbortMultipartTask) Run() {
	panic("mockAbortMultipartTask should not be run.")
}

// AbortMultipartTask will abort all multipart uploads in a bucket.
type AbortMultipartTask struct {
	abortMultipartTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *AbortMultipartTask) Run() {
	t.run()
}

func (t *AbortMultipartTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task AbortMultipart failed: {%w}", err))
}

// Wait will wait until AbortMultipartTask has been finished
func (t *AbortMultipartTask) Wait() {
	t.GetPool().Wait()
}

// multipartCompleteTaskRequirement is the requirement for execute MultipartCompleteTask.
type multipartCompleteTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.SegmentIDGetter

	// Mutable value
}

// mockMultipartCompleteTask is the mock task for MultipartCompleteTask.
type mockMultipartCompleteTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.SegmentID

	// Mutable value
}

func (t *mockMultipartCompleteTask) Run() {
	panic("mockMultipartCompleteTask should not be run.")
}

// MultipartCompleteTask will upload a multipart via stream.
type MultipartCompleteTask struct {
	multipartCompleteTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartCompleteTask) Run() {
	t.run()
}

func (t *MultipartCompleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartComplete failed: {%w}", err))
}

// Wait will wait until MultipartCompleteTask has been finished
func (t *MultipartCompleteTask) Wait() {
	t.GetPool().Wait()
}

// multipartFileUploadTaskRequirement is the requirement for execute MultipartFileUploadTask.
type multipartFileUploadTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter

	// Mutable value
}

// mockMultipartFileUploadTask is the mock task for MultipartFileUploadTask.
type mockMultipartFileUploadTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size
	types.SourcePath
	types.SourceStorage

	// Mutable value
}

func (t *mockMultipartFileUploadTask) Run() {
	panic("mockMultipartFileUploadTask should not be run.")
}

// MultipartFileUploadTask will upload a multipart via file.
type MultipartFileUploadTask struct {
	multipartFileUploadTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartFileUploadTask) Run() {
	t.run()
}

func (t *MultipartFileUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartFileUpload failed: {%w}", err))
}

// Wait will wait until MultipartFileUploadTask has been finished
func (t *MultipartFileUploadTask) Wait() {
	t.GetPool().Wait()
}

// multipartInitTaskRequirement is the requirement for execute MultipartInitTask.
type multipartInitTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.CurrentOffsetGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.TotalSizeGetter

	// Mutable value
}

// mockMultipartInitTask is the mock task for MultipartInitTask.
type mockMultipartInitTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.CurrentOffset
	types.DestinationPath
	types.DestinationStorage
	types.TotalSize

	// Mutable value
}

func (t *mockMultipartInitTask) Run() {
	panic("mockMultipartInitTask should not be run.")
}

// MultipartInitTask will init a multipart upload.
type MultipartInitTask struct {
	multipartInitTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.SegmentID
}

// Run implement navvy.Task
func (t *MultipartInitTask) Run() {
	t.run()
}

func (t *MultipartInitTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartInit failed: {%w}", err))
}

// Wait will wait until MultipartInitTask has been finished
func (t *MultipartInitTask) Wait() {
	t.GetPool().Wait()
}

// multipartStreamUploadTaskRequirement is the requirement for execute MultipartStreamUploadTask.
type multipartStreamUploadTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.ContentGetter
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.SegmentIDGetter
	types.SizeGetter

	// Mutable value
}

// mockMultipartStreamUploadTask is the mock task for MultipartStreamUploadTask.
type mockMultipartStreamUploadTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Content
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Offset
	types.SegmentID
	types.Size

	// Mutable value
}

func (t *mockMultipartStreamUploadTask) Run() {
	panic("mockMultipartStreamUploadTask should not be run.")
}

// MultipartStreamUploadTask will upload a multipart via stream.
type MultipartStreamUploadTask struct {
	multipartStreamUploadTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *MultipartStreamUploadTask) Run() {
	t.run()
}

func (t *MultipartStreamUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task MultipartStreamUpload failed: {%w}", err))
}

// Wait will wait until MultipartStreamUploadTask has been finished
func (t *MultipartStreamUploadTask) Wait() {
	t.GetPool().Wait()
}
