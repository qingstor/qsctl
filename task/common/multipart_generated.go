// Code generated by go generate; DO NOT EDIT.
package common

import (
	"github.com/Xuanwo/navvy"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask

// multipartCompleteTaskRequirement is the requirement for execute MultipartCompleteTask.
type multipartCompleteTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter

	// Inherited value
	types.CurrentPartNumberGetter
	types.KeyGetter
	types.StorageGetter
	types.UploadIDGetter
	// Runtime value
}

// mockMultipartCompleteTask is the mock task for MultipartCompleteTask.
type mockMultipartCompleteTask struct {
	types.Todo
	types.Pool

	// Inherited value
	types.CurrentPartNumber
	types.Key
	types.Storage
	types.UploadID
	// Runtime value
}

func (t *mockMultipartCompleteTask) Run() {
	panic("mockMultipartCompleteTask should not be run.")
}

// MultipartCompleteTask will upload a multipart via stream.
type MultipartCompleteTask struct {
	multipartCompleteTaskRequirement
}

// Run implement navvy.Task.
func (t *MultipartCompleteTask) Run() {
	t.run()
	utils.SubmitNextTask(t.multipartCompleteTaskRequirement)
}

// NewMultipartCompleteTask will create a new MultipartCompleteTask.
func NewMultipartCompleteTask(task types.Todoist) navvy.Task {
	return &MultipartCompleteTask{task.(multipartCompleteTaskRequirement)}
}

// multipartFileUploadTaskRequirement is the requirement for execute MultipartFileUploadTask.
type multipartFileUploadTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter

	// Inherited value
	types.KeyGetter
	types.MD5SumGetter
	types.OffsetGetter
	types.PartNumberGetter
	types.PathGetter
	types.SizeGetter
	types.StorageGetter
	types.UploadIDGetter
	types.WaitGroupGetter
	// Runtime value
}

// mockMultipartFileUploadTask is the mock task for MultipartFileUploadTask.
type mockMultipartFileUploadTask struct {
	types.Todo
	types.Pool

	// Inherited value
	types.Key
	types.MD5Sum
	types.Offset
	types.PartNumber
	types.Path
	types.Size
	types.Storage
	types.UploadID
	types.WaitGroup
	// Runtime value
}

func (t *mockMultipartFileUploadTask) Run() {
	panic("mockMultipartFileUploadTask should not be run.")
}

// MultipartFileUploadTask will upload a multipart via file.
type MultipartFileUploadTask struct {
	multipartFileUploadTaskRequirement
}

// Run implement navvy.Task.
func (t *MultipartFileUploadTask) Run() {
	t.run()
	utils.SubmitNextTask(t.multipartFileUploadTaskRequirement)
}

// NewMultipartFileUploadTask will create a new MultipartFileUploadTask.
func NewMultipartFileUploadTask(task types.Todoist) navvy.Task {
	return &MultipartFileUploadTask{task.(multipartFileUploadTaskRequirement)}
}

// multipartInitTaskRequirement is the requirement for execute MultipartInitTask.
type multipartInitTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter

	// Inherited value
	types.CurrentOffsetGetter
	types.KeyGetter
	types.StorageGetter
	types.TaskConstructorGetter
	types.TotalSizeGetter
	types.WaitGroupGetter
	// Runtime value
	types.UploadIDSetter
}

// mockMultipartInitTask is the mock task for MultipartInitTask.
type mockMultipartInitTask struct {
	types.Todo
	types.Pool

	// Inherited value
	types.CurrentOffset
	types.Key
	types.Storage
	types.TaskConstructor
	types.TotalSize
	types.WaitGroup
	// Runtime value
	types.UploadID
}

func (t *mockMultipartInitTask) Run() {
	panic("mockMultipartInitTask should not be run.")
}

// MultipartInitTask will init a multipart upload.
type MultipartInitTask struct {
	multipartInitTaskRequirement
}

// Run implement navvy.Task.
func (t *MultipartInitTask) Run() {
	t.run()
	utils.SubmitNextTask(t.multipartInitTaskRequirement)
}

// NewMultipartInitTask will create a new MultipartInitTask.
func NewMultipartInitTask(task types.Todoist) navvy.Task {
	return &MultipartInitTask{task.(multipartInitTaskRequirement)}
}

// multipartStreamUploadTaskRequirement is the requirement for execute MultipartStreamUploadTask.
type multipartStreamUploadTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter

	// Inherited value
	types.ContentGetter
	types.KeyGetter
	types.MD5SumGetter
	types.PartNumberGetter
	types.SizeGetter
	types.StorageGetter
	types.UploadIDGetter
	types.WaitGroupGetter
	// Runtime value
}

// mockMultipartStreamUploadTask is the mock task for MultipartStreamUploadTask.
type mockMultipartStreamUploadTask struct {
	types.Todo
	types.Pool

	// Inherited value
	types.Content
	types.Key
	types.MD5Sum
	types.PartNumber
	types.Size
	types.Storage
	types.UploadID
	types.WaitGroup
	// Runtime value
}

func (t *mockMultipartStreamUploadTask) Run() {
	panic("mockMultipartStreamUploadTask should not be run.")
}

// MultipartStreamUploadTask will upload a multipart via stream.
type MultipartStreamUploadTask struct {
	multipartStreamUploadTaskRequirement
}

// Run implement navvy.Task.
func (t *MultipartStreamUploadTask) Run() {
	t.run()
	utils.SubmitNextTask(t.multipartStreamUploadTaskRequirement)
}

// NewMultipartStreamUploadTask will create a new MultipartStreamUploadTask.
func NewMultipartStreamUploadTask(task types.Todoist) navvy.Task {
	return &MultipartStreamUploadTask{task.(multipartStreamUploadTaskRequirement)}
}
