// Code generated by go generate; DO NOT EDIT.
package common

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
)

var _ navvy.Pool
var _ types.Pool
var _ = uuid.New()

// objectDeleteTaskRequirement is the requirement for execute ObjectDeleteTask.
type objectDeleteTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockObjectDeleteTask is the mock task for ObjectDeleteTask.
type mockObjectDeleteTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockObjectDeleteTask) Run() {
	panic("mockObjectDeleteTask should not be run.")
}

// ObjectDeleteTask will will delete a remote object with specific key.
type ObjectDeleteTask struct {
	objectDeleteTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *ObjectDeleteTask) Run() {
	t.run()
}

func (t *ObjectDeleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDelete failed: {%w}", err))
}

// NewObjectDeleteTask will create a ObjectDeleteTask and fetch inherited data from parent task.
func NewObjectDeleteTask(task navvy.Task) navvy.Task {
	t := &ObjectDeleteTask{
		objectDeleteTaskRequirement: task.(objectDeleteTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectDeleteIterateTaskRequirement is the requirement for execute ObjectDeleteIterateTask.
type objectDeleteIterateTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DoneGetter

	// Mutable value
}

// mockObjectDeleteIterateTask is the mock task for ObjectDeleteIterateTask.
type mockObjectDeleteIterateTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.Done

	// Mutable value
}

func (t *mockObjectDeleteIterateTask) Run() {
	panic("mockObjectDeleteIterateTask should not be run.")
}

// ObjectDeleteIterateTask will delete a dir with rm -r.
type ObjectDeleteIterateTask struct {
	objectDeleteIterateTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
}

// Run implement navvy.Task
func (t *ObjectDeleteIterateTask) Run() {
	t.run()
}

func (t *ObjectDeleteIterateTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDeleteIterate failed: {%w}", err))
}

// NewObjectDeleteIterateTask will create a ObjectDeleteIterateTask and fetch inherited data from parent task.
func NewObjectDeleteIterateTask(task navvy.Task) navvy.Task {
	t := &ObjectDeleteIterateTask{
		objectDeleteIterateTaskRequirement: task.(objectDeleteIterateTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// objectDeleteScheduledTaskRequirement is the requirement for execute ObjectDeleteScheduledTask.
type objectDeleteScheduledTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DestinationStorageGetter
	types.DoneGetter
	types.ObjectChannelGetter

	// Mutable value
}

// mockObjectDeleteScheduledTask is the mock task for ObjectDeleteScheduledTask.
type mockObjectDeleteScheduledTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationStorage
	types.Done
	types.ObjectChannel

	// Mutable value
}

func (t *mockObjectDeleteScheduledTask) Run() {
	panic("mockObjectDeleteScheduledTask should not be run.")
}

// ObjectDeleteScheduledTask will will delete remote objects with object channel.
type ObjectDeleteScheduledTask struct {
	objectDeleteScheduledTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.DestinationPath
}

// Run implement navvy.Task
func (t *ObjectDeleteScheduledTask) Run() {
	t.run()
}

func (t *ObjectDeleteScheduledTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDeleteScheduled failed: {%w}", err))
}

// NewObjectDeleteScheduledTask will create a ObjectDeleteScheduledTask and fetch inherited data from parent task.
func NewObjectDeleteScheduledTask(task navvy.Task) navvy.Task {
	t := &ObjectDeleteScheduledTask{
		objectDeleteScheduledTaskRequirement: task.(objectDeleteScheduledTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// removeDirTaskRequirement is the requirement for execute RemoveDirTask.
type removeDirTaskRequirement interface {
	navvy.Task

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter

	// Mutable value
}

// mockRemoveDirTask is the mock task for RemoveDirTask.
type mockRemoveDirTask struct {
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage

	// Mutable value
}

func (t *mockRemoveDirTask) Run() {
	panic("mockRemoveDirTask should not be run.")
}

// RemoveDirTask will will delete a dir recursively.
type RemoveDirTask struct {
	removeDirTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Scheduler

	// Runtime value
	types.Done
	types.ObjectChannel
	types.Recursive
}

// Run implement navvy.Task
func (t *RemoveDirTask) Run() {
	t.run()
}

func (t *RemoveDirTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task RemoveDir failed: {%w}", err))
}

// NewRemoveDirTask will create a RemoveDirTask and fetch inherited data from parent task.
func NewRemoveDirTask(task navvy.Task) navvy.Task {
	t := &RemoveDirTask{
		removeDirTaskRequirement: task.(removeDirTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}
