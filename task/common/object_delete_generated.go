// Code generated by go generate; DO NOT EDIT.
package common

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask
var _ = uuid.New()

// dirDeleteTaskRequirement is the requirement for execute DirDeleteTask.
type dirDeleteTaskRequirement interface {
	navvy.Task
	types.PoolGetter

	// Inherited value
	types.DeleteKeyGetter
	types.DestinationStorageGetter
	types.SchedulerGetter
}

// mockDirDeleteTask is the mock task for DirDeleteTask.
type mockDirDeleteTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DeleteKey
	types.DestinationStorage
	types.Scheduler
}

func (t *mockDirDeleteTask) Run() {
	panic("mockDirDeleteTask should not be run.")
}

// DirDeleteTask will will delete a dir recursively.
type DirDeleteTask struct {
	dirDeleteTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Todo

	// Runtime value
	types.Key
}

// Run implement navvy.Task
func (t *DirDeleteTask) Run() {
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t)
}

func (t *DirDeleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DirDelete failed: {%w}", err))
}

// NewDirDeleteTask will create a DirDeleteTask and fetch inherited data from RemoveDirTask.
func NewDirDeleteTask(task types.Todoist) navvy.Task {
	t := &DirDeleteTask{
		dirDeleteTaskRequirement: task.(dirDeleteTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}

// dirDeleteInitTaskRequirement is the requirement for execute DirDeleteInitTask.
type dirDeleteInitTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.FaultSetter
	types.FaultValidator
	types.IDGetter

	// Inherited value
	types.ObjectChannelGetter
	types.PrefixGetter
	types.SchedulerGetter
	// Runtime value
	types.DeleteKeySetter
}

// mockDirDeleteInitTask is the mock task for DirDeleteInitTask.
type mockDirDeleteInitTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.ObjectChannel
	types.Prefix
	types.Scheduler
	// Runtime value
	types.DeleteKey
}

func (t *mockDirDeleteInitTask) Run() {
	panic("mockDirDeleteInitTask should not be run.")
}

// DirDeleteInitTask will will init object delete recursively work.
type DirDeleteInitTask struct {
	dirDeleteInitTaskRequirement
}

// Run implement navvy.Task.
func (t *DirDeleteInitTask) Run() {
	t.run()
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t.dirDeleteInitTaskRequirement)
}

func (t *DirDeleteInitTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task DirDeleteInit failed: {%w}", err))
}

// NewDirDeleteInitTask will create a new DirDeleteInitTask.
func NewDirDeleteInitTask(task types.Todoist) navvy.Task {
	return &DirDeleteInitTask{task.(dirDeleteInitTaskRequirement)}
}

// objectDeleteTaskRequirement is the requirement for execute ObjectDeleteTask.
type objectDeleteTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.FaultSetter
	types.FaultValidator
	types.IDGetter

	// Inherited value
	types.DestinationStorageGetter
	types.KeyGetter
	// Runtime value
}

// mockObjectDeleteTask is the mock task for ObjectDeleteTask.
type mockObjectDeleteTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationStorage
	types.Key
	// Runtime value
}

func (t *mockObjectDeleteTask) Run() {
	panic("mockObjectDeleteTask should not be run.")
}

// ObjectDeleteTask will will delete a remote object with specific key.
type ObjectDeleteTask struct {
	objectDeleteTaskRequirement
}

// Run implement navvy.Task.
func (t *ObjectDeleteTask) Run() {
	t.run()
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t.objectDeleteTaskRequirement)
}

func (t *ObjectDeleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDelete failed: {%w}", err))
}

// NewObjectDeleteTask will create a new ObjectDeleteTask.
func NewObjectDeleteTask(task types.Todoist) navvy.Task {
	return &ObjectDeleteTask{task.(objectDeleteTaskRequirement)}
}

// objectDeleteWithSchedulerTaskRequirement is the requirement for execute ObjectDeleteWithSchedulerTask.
type objectDeleteWithSchedulerTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.FaultSetter
	types.FaultValidator
	types.IDGetter

	// Inherited value
	types.DestinationStorageGetter
	types.KeyGetter
	types.SchedulerGetter
	// Runtime value
}

// mockObjectDeleteWithSchedulerTask is the mock task for ObjectDeleteWithSchedulerTask.
type mockObjectDeleteWithSchedulerTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationStorage
	types.Key
	types.Scheduler
	// Runtime value
}

func (t *mockObjectDeleteWithSchedulerTask) Run() {
	panic("mockObjectDeleteWithSchedulerTask should not be run.")
}

// ObjectDeleteWithSchedulerTask will will delete a remote object with specific key.
type ObjectDeleteWithSchedulerTask struct {
	objectDeleteWithSchedulerTaskRequirement
}

// Run implement navvy.Task.
func (t *ObjectDeleteWithSchedulerTask) Run() {
	t.run()
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t.objectDeleteWithSchedulerTaskRequirement)
}

func (t *ObjectDeleteWithSchedulerTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDeleteWithScheduler failed: {%w}", err))
}

// NewObjectDeleteWithSchedulerTask will create a new ObjectDeleteWithSchedulerTask.
func NewObjectDeleteWithSchedulerTask(task types.Todoist) navvy.Task {
	return &ObjectDeleteWithSchedulerTask{task.(objectDeleteWithSchedulerTaskRequirement)}
}

// removeDirTaskRequirement is the requirement for execute RemoveDirTask.
type removeDirTaskRequirement interface {
	navvy.Task
	types.PoolGetter

	// Inherited value
	types.DestinationStorageGetter
	types.PrefixGetter
	types.RecursiveGetter
}

// mockRemoveDirTask is the mock task for RemoveDirTask.
type mockRemoveDirTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationStorage
	types.Prefix
	types.Recursive
}

func (t *mockRemoveDirTask) Run() {
	panic("mockRemoveDirTask should not be run.")
}

// RemoveDirTask will will remove a directory recursively.
type RemoveDirTask struct {
	removeDirTaskRequirement

	// Predefined runtime value
	types.Fault
	types.ID
	types.Todo

	// Runtime value
	types.DeleteKey
	types.Key
	types.ObjectChannel
	types.Scheduler
}

// Run implement navvy.Task
func (t *RemoveDirTask) Run() {
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t)
}

func (t *RemoveDirTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task RemoveDir failed: {%w}", err))
}

// NewRemoveDirTask will create a RemoveDirTask and fetch inherited data from RemoveObjectTask.
func NewRemoveDirTask(task types.Todoist) navvy.Task {
	t := &RemoveDirTask{
		removeDirTaskRequirement: task.(removeDirTaskRequirement),
	}
	t.SetID(uuid.New().String())
	t.new()
	return t
}
