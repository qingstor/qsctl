// Code generated by go generate; DO NOT EDIT.
package common

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask
var _ = uuid.New()

// objectDeleteTaskRequirement is the requirement for execute ObjectDeleteTask.
type objectDeleteTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.FaultSetter
	types.FaultValidator
	types.IDGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	// Runtime value
}

// mockObjectDeleteTask is the mock task for ObjectDeleteTask.
type mockObjectDeleteTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	// Runtime value
}

func (t *mockObjectDeleteTask) Run() {
	panic("mockObjectDeleteTask should not be run.")
}

// ObjectDeleteTask will will delete a remote object with specific key.
type ObjectDeleteTask struct {
	objectDeleteTaskRequirement
}

// Run implement navvy.Task.
func (t *ObjectDeleteTask) Run() {
	t.run()
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t.objectDeleteTaskRequirement)
}

func (t *ObjectDeleteTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task ObjectDelete failed: {%w}", err))
}

// NewObjectDeleteTask will create a new ObjectDeleteTask.
func NewObjectDeleteTask(task types.Todoist) navvy.Task {
	return &ObjectDeleteTask{task.(objectDeleteTaskRequirement)}
}
