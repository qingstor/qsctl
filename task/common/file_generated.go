// Code generated by go generate; DO NOT EDIT.
package common

import (
	"fmt"

	"github.com/Xuanwo/navvy"
	"github.com/google/uuid"

	"github.com/yunify/qsctl/v2/pkg/types"
	"github.com/yunify/qsctl/v2/utils"
)

var _ navvy.Pool
var _ types.Pool
var _ = utils.SubmitNextTask
var _ = uuid.New()

// fileUploadTaskRequirement is the requirement for execute FileUploadTask.
type fileUploadTaskRequirement interface {
	navvy.Task
	types.Todoist
	types.PoolGetter
	types.FaultSetter
	types.FaultValidator
	types.IDGetter

	// Inherited value
	types.DestinationPathGetter
	types.DestinationStorageGetter
	types.MD5SumGetter
	types.SizeGetter
	types.SourcePathGetter
	types.SourceStorageGetter
	// Runtime value
}

// mockFileUploadTask is the mock task for FileUploadTask.
type mockFileUploadTask struct {
	types.Todo
	types.Pool
	types.Fault
	types.ID

	// Inherited value
	types.DestinationPath
	types.DestinationStorage
	types.MD5Sum
	types.Size
	types.SourcePath
	types.SourceStorage
	// Runtime value
}

func (t *mockFileUploadTask) Run() {
	panic("mockFileUploadTask should not be run.")
}

// FileUploadTask will upload file as an object.
type FileUploadTask struct {
	fileUploadTaskRequirement
}

// Run implement navvy.Task.
func (t *FileUploadTask) Run() {
	t.run()
	if t.ValidateFault() {
		return
	}
	utils.SubmitNextTask(t.fileUploadTaskRequirement)
}

func (t *FileUploadTask) TriggerFault(err error) {
	t.SetFault(fmt.Errorf("Task FileUpload failed: {%w}", err))
}

// NewFileUploadTask will create a new FileUploadTask.
func NewFileUploadTask(task types.Todoist) navvy.Task {
	return &FileUploadTask{task.(fileUploadTaskRequirement)}
}
