// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yunify/qsctl/v2/pkg/schedule (interfaces: Scheduler)

// Package mock is a generated GoMock package.
package mock

import (
	navvy "github.com/Xuanwo/navvy"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// Async mocks base method
func (m *MockScheduler) Async(arg0 navvy.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Async", arg0)
}

// Async indicates an expected call of Async
func (mr *MockSchedulerMockRecorder) Async(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Async", reflect.TypeOf((*MockScheduler)(nil).Async), arg0)
}

// Sync mocks base method
func (m *MockScheduler) Sync(arg0 navvy.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync", arg0)
}

// Sync indicates an expected call of Sync
func (mr *MockSchedulerMockRecorder) Sync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockScheduler)(nil).Sync), arg0)
}

// Wait mocks base method
func (m *MockScheduler) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait
func (mr *MockSchedulerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockScheduler)(nil).Wait))
}
